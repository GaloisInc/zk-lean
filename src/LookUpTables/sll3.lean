import ZkLean
import ZKlean.solve_mle


set_option maxHeartbeats  20000000000000000000

def SLL3_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => 0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[7] + 2*x[6] + 4*x[5] + 8*x[4] + 16*x[3] + 32*x[2] + 64*x[1] + 128*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2*x[7] + 4*x[6] + 8*x[5] + 16*x[4] + 32*x[3] + 64*x[2] + 128*x[1]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 4*x[7] + 8*x[6] + 16*x[5] + 32*x[4] + 64*x[3] + 128*x[2]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 8*x[7] + 16*x[6] + 32*x[5] + 64*x[4] + 128*x[3]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 16*x[7] + 32*x[6] + 64*x[5] + 128*x[4]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 32*x[7] + 64*x[6] + 128*x[5]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 64*x[7] + 128*x[6]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 128*x[7]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0)


lemma sll_3_mle_one_chunk_liza[ZKField f] (bv1 bv2 : BitVec 8) (fv1 fv2 : Vector f 8) :
  some bvoutput = map_f_to_bv_32 foutput ->
   some (bool_to_bv_32 bv1[7])  = map_f_to_bv_32 fv1[0]  ->
   some (bool_to_bv_32 bv1[6]) = map_f_to_bv_32 fv1[1]  ->
   some (bool_to_bv_32 bv1[5]) = map_f_to_bv_32 fv1[2]  ->
   some (bool_to_bv_32 bv1[4]) = map_f_to_bv_32 fv1[3]  ->
   some (bool_to_bv_32 bv1[3]) = map_f_to_bv_32 fv1[4]  ->
  some (bool_to_bv_32 bv1[2]) = map_f_to_bv_32 fv1[5]  ->
   some (bool_to_bv_32 bv1[1]) = map_f_to_bv_32 fv1[6]  ->
   some (bool_to_bv_32 bv1[0]) = map_f_to_bv_32 fv1[7]  ->
  some (bool_to_bv_32 bv2[7]) = map_f_to_bv_32 fv2[0]  ->
  some (bool_to_bv_32 bv2[6]) = map_f_to_bv_32 fv2[1]  ->
  some (bool_to_bv_32 bv2[5]) = map_f_to_bv_32 fv2[2]  ->
  some (bool_to_bv_32 bv2[4]) = map_f_to_bv_32 fv2[3]  ->
  some (bool_to_bv_32 bv2[3]) = map_f_to_bv_32 fv2[4]  ->
  some (bool_to_bv_32 bv2[2]) = map_f_to_bv_32 fv2[5]  ->
  some (bool_to_bv_32 bv2[1]) = map_f_to_bv_32 fv2[6]  ->
  some (bool_to_bv_32 bv2[0]) = map_f_to_bv_32 fv2[7]  ->
  bv2[7] = false ->
  bv2[6] = false ->
  bv2[5] = false ->
  (bvoutput = ((bv1.zeroExtend 8) <<< bv2.toNat).zeroExtend 32)
  =
  (foutput = evalSubtable SLL3_16 (Vector.append fv1 fv2))
 := by
  solveMLE SLL3_16 32
