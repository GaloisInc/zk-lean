import Mathlib.Algebra.Field.Defs
import Mathlib.Algebra.Field.ZMod
import Mathlib.Control.Fold
import Mathlib.Data.Nat.Prime.Defs
import Mathlib.Data.ZMod.Defs
import Mathlib.Algebra.Order.Kleene
import ZkLean
import Std.Data.HashMap.Basic
import Lean.Meta.Basic
import Lean.Elab.Term
--import Mathlib.Tactic.Ring
import Std.Tactic.BVDecide
import Mathlib.Tactic.Linarith
import ZkLean.valify
import ZkLean.range_analysis
import ZkLean.bvify
import Auto.Tactic






open Lean Meta Elab Term
open Std
open BitVec

abbrev ff := 17179869203
abbrev f := ZMod ff
abbrev b := Nat.log2 ff


def bool_to_bv (b: Bool) : (BitVec 8) := if b == true then 1 else 0
--if b == false then 1

def bool_to_bv_16 (b: Bool) : (BitVec 16) := if b == true then 1 else 0
--if b == false then 1

def bool_to_bv_32 (b: Bool) : (BitVec 32) := if b == true then 1 else 0
--if b == false then 1

instance : Fact (Nat.Prime ff) := by sorry
instance : ZKField (ZMod ff) where
  hash x :=
    match x.val with
    | 0 => 0
    | n + 1 => hash n

  chunk_to_bits {num_bits: Nat} f :=
    let bv : BitVec 16 := BitVec.ofFin (Fin.castSucc f)
    -- TODO: Double check the endianess.
    Vector.map (fun i =>
      if _:i < 3 then
        if bv[i] then 1 else 0
      else
        0
    ) (Vector.range num_bits)

instance : Witnessable (ZMod ff) (ZMod ff) := by sorry

open Mathlib.Tactic.Valify

instance NotTwo: GtTwo (ff) := by
  have hlt: 2 < ff := by decide
  sorry

#check (inferInstance : SubNegMonoid (ZMod ff))

instance IsThisTrue: SubNegMonoid (ZMod ff) :=
  inferInstance


def map_f_to_bv (rs1_val : ZMod ff) : Option (BitVec 8) :=
  let n := (rs1_val.val : Nat)
  if n < 2^8 then
    some (BitVec.ofNat 8 n)
  else
    none

def map_f_to_bv_16 (rs1_val : ZMod ff) : Option (BitVec 16) :=
  let n := (rs1_val.val : Nat)
  if n < 2^16 then
    some (BitVec.ofNat 16 n)
  else
    none

def map_f_to_bv_32 (rs1_val : ZMod ff) : Option (BitVec 32) :=
  let n := (rs1_val.val : Nat)
  if n < 2^32 then
    some (BitVec.ofNat 32 n)
  else
    none

set_option maxHeartbeats 2000000


lemma extract_bv_rel{bf x} : some (bool_to_bv bf) = map_f_to_bv x <-> (x.val <= 1 /\ (if (bf = true) = true then 1#8 else 0#8) = BitVec.ofNat 8 x.val) := by
  unfold map_f_to_bv
  unfold bool_to_bv
  dsimp
  simp
  intros h
  constructor
  intros hx
  cases a: x.val with
    | zero => decide
    | succ n => cases n with
      | zero => decide
      | succ m =>
          exfalso
          rw [a] at h
          unfold BitVec.ofNat at h
          unfold Fin.ofNat at h
          have h' := congrArg (fun x => x.toFin.val) h
          simp at h'
          cases g : bf with
            | true =>
              have mod_eq : (m + 2) % 256 = m + 2 := Nat.mod_eq_of_lt (by linarith [hx, a])
              rw [← h'] at mod_eq
              rw [g] at mod_eq
              simp at mod_eq

            | false =>
              have mod_eq : (m + 2) % 256 = m + 2 := Nat.mod_eq_of_lt (by linarith [hx, a])
              rw [← h'] at mod_eq
              rw [g] at mod_eq
              simp at mod_eq
  intro h
  linarith


lemma extract_bv_rel_16{bf x} : some (bool_to_bv_16 bf) = map_f_to_bv_16 x <-> (x.val <= 1 /\ (if (bf = true) = true then 1#16 else 0#16) = BitVec.ofNat 16 x.val) := by
  unfold map_f_to_bv_16
  unfold bool_to_bv_16
  dsimp
  simp
  intros h
  constructor
  intros hx
  cases a: x.val with
    | zero => decide
    | succ n => cases n with
      | zero => decide
      | succ m =>
          exfalso
          rw [a] at h
          unfold BitVec.ofNat at h
          unfold Fin.ofNat at h
          have h' := congrArg (fun x => x.toFin.val) h
          simp at h'
          cases g : bf with
            | true =>
              have mod_eq : (m + 2) % 65536= m + 2 := Nat.mod_eq_of_lt (by linarith [hx, a])
              rw [← h'] at mod_eq
              rw [g] at mod_eq
              simp at mod_eq

            | false =>
              have mod_eq : (m + 2) % 65536 = m + 2 := Nat.mod_eq_of_lt (by linarith [hx, a])
              rw [← h'] at mod_eq
              rw [g] at mod_eq
              simp at mod_eq
  intro h
  linarith


lemma extract_bv_rel_32{bf x} : some (bool_to_bv_32 bf) = map_f_to_bv_32 x <-> (x.val <= 1 /\ (if (bf = true) = true then 1#32 else 0#32) = BitVec.ofNat 32 x.val) := by
  unfold map_f_to_bv_32
  unfold bool_to_bv_32
  dsimp
  simp
  intros h
  constructor
  intros hx
  cases a: x.val with
    | zero => decide
    | succ n => cases n with
      | zero => decide
      | succ m =>
          exfalso
          rw [a] at h
          unfold BitVec.ofNat at h
          unfold Fin.ofNat at h
          have h' := congrArg (fun x => x.toFin.val) h
          simp at h'
          cases g : bf with
            | true =>
              have mod_eq : (m + 2) % 4294967296 = m + 2 := Nat.mod_eq_of_lt (by linarith [hx, a])
              rw [← h'] at mod_eq
              rw [g] at mod_eq
              simp at mod_eq

            | false =>
              have mod_eq : (m + 2) % 4294967296 = m + 2 := Nat.mod_eq_of_lt (by linarith [hx, a])
              rw [← h'] at mod_eq
              rw [g] at mod_eq
              simp at mod_eq
  intro h
  linarith



lemma ZMod.eq_if_val (a b : ZMod ff) :
  (a = b ) <->  (a.val = b.val) := by
  apply Iff.intro
  intros h
  rw [h]
  intros h
  apply ZMod.val_injective at h
  exact h


lemma BitVec.ofNat_eq_iff {x y : ℕ} (hx : x < 2^8) (hy : y < 2^8) :
  (x = y)  <-> (BitVec.ofNat 8 x = BitVec.ofNat 8 y):= by
  constructor
  intro h
  rw [h]
  intro h
  unfold BitVec.ofNat at h
  unfold Fin.ofNat at h
  have h' := congrArg (fun x => x.toFin.val) h
  simp at h
  apply Nat.mod_eq_of_modEq at h'
  have hxy : x % 2^8 = y := h' hy
  rw [Nat.mod_eq_of_lt] at hxy
  apply hxy
  apply hx

lemma BitVec.ofNat_eq_iff_16 {x y : ℕ} (hx : x < 2^16) (hy : y < 2^16) :
  (x = y)  <-> (BitVec.ofNat 16 x = BitVec.ofNat 16 y):= by
  constructor
  intro h
  rw [h]
  intro h
  unfold BitVec.ofNat at h
  unfold Fin.ofNat at h
  have h' := congrArg (fun x => x.toFin.val) h
  simp at h
  apply Nat.mod_eq_of_modEq at h'
  have hxy : x % 2^16 = y := h' hy
  rw [Nat.mod_eq_of_lt] at hxy
  apply hxy
  apply hx


lemma BitVec.ofNat_eq_iff_32 {x y : ℕ} (hx : x < 2^32) (hy : y < 2^32) :
  (x = y)  <-> (BitVec.ofNat 32 x = BitVec.ofNat 32 y):= by
  constructor
  intro h
  rw [h]
  intro h
  unfold BitVec.ofNat at h
  unfold Fin.ofNat at h
  have h' := congrArg (fun x => x.toFin.val) h
  simp at h
  apply Nat.mod_eq_of_modEq at h'
  have hxy : x % 2^32 = y := h' hy
  rw [Nat.mod_eq_of_lt] at hxy
  apply hxy
  apply hx



def AND_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => 0 + 1*x[7]*x[15] + 2*x[6]*x[14] + 4*x[5]*x[13] + 8*x[4]*x[12] + 16*x[3]*x[11] + 32*x[2]*x[10] + 64*x[1]*x[9] + 128*x[0]*x[8])
def EQ_ABS_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => 1*(x[1]*x[9] + (1 - x[1])*(1 - x[9]))*(x[2]*x[10] + (1 - x[2])*(1 - x[10]))*(x[3]*x[11] + (1 - x[3])*(1 - x[11]))*(x[4]*x[12] + (1 - x[4])*(1 - x[12]))*(x[5]*x[13] + (1 - x[5])*(1 - x[13]))*(x[6]*x[14] + (1 - x[6])*(1 - x[14]))*(x[7]*x[15] + (1 - x[7])*(1 - x[15])))
def EQ_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => 1*(x[0]*x[8] + (1 - x[0])*(1 - x[8]))*(x[1]*x[9] + (1 - x[1])*(1 - x[9]))*(x[2]*x[10] + (1 - x[2])*(1 - x[10]))*(x[3]*x[11] + (1 - x[3])*(1 - x[11]))*(x[4]*x[12] + (1 - x[4])*(1 - x[12]))*(x[5]*x[13] + (1 - x[5])*(1 - x[13]))*(x[6]*x[14] + (1 - x[6])*(1 - x[14]))*(x[7]*x[15] + (1 - x[7])*(1 - x[15])))
def LEFT_MSB_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => x[0])
def RIGHT_MSB_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => x[8])
def IDENTITY_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => 0 + 1*x[15] + 2*x[14] + 4*x[13] + 8*x[12] + 16*x[11] + 32*x[10] + 64*x[9] + 128*x[8] + 256*x[7] + 512*x[6] + 1024*x[5] + 2048*x[4] + 4096*x[3] + 8192*x[2] + 16384*x[1] + 32768*x[0])
def LT_ABS_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => 0 + (1 - x[1])*x[9]*1 + (1 - x[2])*x[10]*1*(1 - x[1] - x[9] + x[1]*x[9] + x[1]*x[9]) + (1 - x[3])*x[11]*1*(1 - x[1] - x[9] + x[1]*x[9] + x[1]*x[9])*(1 - x[2] - x[10] + x[2]*x[10] + x[2]*x[10]) + (1 - x[4])*x[12]*1*(1 - x[1] - x[9] + x[1]*x[9] + x[1]*x[9])*(1 - x[2] - x[10] + x[2]*x[10] + x[2]*x[10])*(1 - x[3] - x[11] + x[3]*x[11] + x[3]*x[11]) + (1 - x[5])*x[13]*1*(1 - x[1] - x[9] + x[1]*x[9] + x[1]*x[9])*(1 - x[2] - x[10] + x[2]*x[10] + x[2]*x[10])*(1 - x[3] - x[11] + x[3]*x[11] + x[3]*x[11])*(1 - x[4] - x[12] + x[4]*x[12] + x[4]*x[12]) + (1 - x[6])*x[14]*1*(1 - x[1] - x[9] + x[1]*x[9] + x[1]*x[9])*(1 - x[2] - x[10] + x[2]*x[10] + x[2]*x[10])*(1 - x[3] - x[11] + x[3]*x[11] + x[3]*x[11])*(1 - x[4] - x[12] + x[4]*x[12] + x[4]*x[12])*(1 - x[5] - x[13] + x[5]*x[13] + x[5]*x[13]) + (1 - x[7])*x[15]*1*(1 - x[1] - x[9] + x[1]*x[9] + x[1]*x[9])*(1 - x[2] - x[10] + x[2]*x[10] + x[2]*x[10])*(1 - x[3] - x[11] + x[3]*x[11] + x[3]*x[11])*(1 - x[4] - x[12] + x[4]*x[12] + x[4]*x[12])*(1 - x[5] - x[13] + x[5]*x[13] + x[5]*x[13])*(1 - x[6] - x[14] + x[6]*x[14] + x[6]*x[14]))
def LTU_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => 0 + (1 - x[0])*x[8]*1 + (1 - x[1])*x[9]*1*(1 - x[0] - x[8] + x[0]*x[8] + x[0]*x[8]) + (1 - x[2])*x[10]*1*(1 - x[0] - x[8] + x[0]*x[8] + x[0]*x[8])*(1 - x[1] - x[9] + x[1]*x[9] + x[1]*x[9]) + (1 - x[3])*x[11]*1*(1 - x[0] - x[8] + x[0]*x[8] + x[0]*x[8])*(1 - x[1] - x[9] + x[1]*x[9] + x[1]*x[9])*(1 - x[2] - x[10] + x[2]*x[10] + x[2]*x[10]) + (1 - x[4])*x[12]*1*(1 - x[0] - x[8] + x[0]*x[8] + x[0]*x[8])*(1 - x[1] - x[9] + x[1]*x[9] + x[1]*x[9])*(1 - x[2] - x[10] + x[2]*x[10] + x[2]*x[10])*(1 - x[3] - x[11] + x[3]*x[11] + x[3]*x[11]) + (1 - x[5])*x[13]*1*(1 - x[0] - x[8] + x[0]*x[8] + x[0]*x[8])*(1 - x[1] - x[9] + x[1]*x[9] + x[1]*x[9])*(1 - x[2] - x[10] + x[2]*x[10] + x[2]*x[10])*(1 - x[3] - x[11] + x[3]*x[11] + x[3]*x[11])*(1 - x[4] - x[12] + x[4]*x[12] + x[4]*x[12]) + (1 - x[6])*x[14]*1*(1 - x[0] - x[8] + x[0]*x[8] + x[0]*x[8])*(1 - x[1] - x[9] + x[1]*x[9] + x[1]*x[9])*(1 - x[2] - x[10] + x[2]*x[10] + x[2]*x[10])*(1 - x[3] - x[11] + x[3]*x[11] + x[3]*x[11])*(1 - x[4] - x[12] + x[4]*x[12] + x[4]*x[12])*(1 - x[5] - x[13] + x[5]*x[13] + x[5]*x[13]) + (1 - x[7])*x[15]*1*(1 - x[0] - x[8] + x[0]*x[8] + x[0]*x[8])*(1 - x[1] - x[9] + x[1]*x[9] + x[1]*x[9])*(1 - x[2] - x[10] + x[2]*x[10] + x[2]*x[10])*(1 - x[3] - x[11] + x[3]*x[11] + x[3]*x[11])*(1 - x[4] - x[12] + x[4]*x[12] + x[4]*x[12])*(1 - x[5] - x[13] + x[5]*x[13] + x[5]*x[13])*(1 - x[6] - x[14] + x[6]*x[14] + x[6]*x[14]))
def OR_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => 0 + 1*(x[7] + x[15] - x[7]*x[15]) + 2*(x[6] + x[14] - x[6]*x[14]) + 4*(x[5] + x[13] - x[5]*x[13]) + 8*(x[4] + x[12] - x[4]*x[12]) + 16*(x[3] + x[11] - x[3]*x[11]) + 32*(x[2] + x[10] - x[2]*x[10]) + 64*(x[1] + x[9] - x[1]*x[9]) + 128*(x[0] + x[8] - x[0]*x[8]))
def SIGN_EXTEND_16_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => x[0]*65535)
def SLL0_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => 0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[7] + 2*x[6] + 4*x[5] + 8*x[4] + 16*x[3] + 32*x[2] + 64*x[1] + 128*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2*x[7] + 4*x[6] + 8*x[5] + 16*x[4] + 32*x[3] + 64*x[2] + 128*x[1] + 256*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 4*x[7] + 8*x[6] + 16*x[5] + 32*x[4] + 64*x[3] + 128*x[2] + 256*x[1] + 512*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 8*x[7] + 16*x[6] + 32*x[5] + 64*x[4] + 128*x[3] + 256*x[2] + 512*x[1] + 1024*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 16*x[7] + 32*x[6] + 64*x[5] + 128*x[4] + 256*x[3] + 512*x[2] + 1024*x[1] + 2048*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 32*x[7] + 64*x[6] + 128*x[5] + 256*x[4] + 512*x[3] + 1024*x[2] + 2048*x[1] + 4096*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 64*x[7] + 128*x[6] + 256*x[5] + 512*x[4] + 1024*x[3] + 2048*x[2] + 4096*x[1] + 8192*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 128*x[7] + 256*x[6] + 512*x[5] + 1024*x[4] + 2048*x[3] + 4096*x[2] + 8192*x[1] + 16384*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 256*x[7] + 512*x[6] + 1024*x[5] + 2048*x[4] + 4096*x[3] + 8192*x[2] + 16384*x[1] + 32768*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 512*x[7] + 1024*x[6] + 2048*x[5] + 4096*x[4] + 8192*x[3] + 16384*x[2] + 32768*x[1] + 65536*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1024*x[7] + 2048*x[6] + 4096*x[5] + 8192*x[4] + 16384*x[3] + 32768*x[2] + 65536*x[1] + 131072*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2048*x[7] + 4096*x[6] + 8192*x[5] + 16384*x[4] + 32768*x[3] + 65536*x[2] + 131072*x[1] + 262144*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 4096*x[7] + 8192*x[6] + 16384*x[5] + 32768*x[4] + 65536*x[3] + 131072*x[2] + 262144*x[1] + 524288*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 8192*x[7] + 16384*x[6] + 32768*x[5] + 65536*x[4] + 131072*x[3] + 262144*x[2] + 524288*x[1] + 1048576*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 16384*x[7] + 32768*x[6] + 65536*x[5] + 131072*x[4] + 262144*x[3] + 524288*x[2] + 1048576*x[1] + 2097152*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 32768*x[7] + 65536*x[6] + 131072*x[5] + 262144*x[4] + 524288*x[3] + 1048576*x[2] + 2097152*x[1] + 4194304*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 65536*x[7] + 131072*x[6] + 262144*x[5] + 524288*x[4] + 1048576*x[3] + 2097152*x[2] + 4194304*x[1] + 8388608*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 131072*x[7] + 262144*x[6] + 524288*x[5] + 1048576*x[4] + 2097152*x[3] + 4194304*x[2] + 8388608*x[1] + 16777216*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 262144*x[7] + 524288*x[6] + 1048576*x[5] + 2097152*x[4] + 4194304*x[3] + 8388608*x[2] + 16777216*x[1] + 33554432*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 524288*x[7] + 1048576*x[6] + 2097152*x[5] + 4194304*x[4] + 8388608*x[3] + 16777216*x[2] + 33554432*x[1] + 67108864*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1048576*x[7] + 2097152*x[6] + 4194304*x[5] + 8388608*x[4] + 16777216*x[3] + 33554432*x[2] + 67108864*x[1] + 134217728*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2097152*x[7] + 4194304*x[6] + 8388608*x[5] + 16777216*x[4] + 33554432*x[3] + 67108864*x[2] + 134217728*x[1] + 268435456*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 4194304*x[7] + 8388608*x[6] + 16777216*x[5] + 33554432*x[4] + 67108864*x[3] + 134217728*x[2] + 268435456*x[1] + 536870912*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 8388608*x[7] + 16777216*x[6] + 33554432*x[5] + 67108864*x[4] + 134217728*x[3] + 268435456*x[2] + 536870912*x[1] + 1073741824*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 16777216*x[7] + 33554432*x[6] + 67108864*x[5] + 134217728*x[4] + 268435456*x[3] + 536870912*x[2] + 1073741824*x[1] + 2147483648*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 33554432*x[7] + 67108864*x[6] + 134217728*x[5] + 268435456*x[4] + 536870912*x[3] + 1073741824*x[2] + 2147483648*x[1]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 67108864*x[7] + 134217728*x[6] + 268435456*x[5] + 536870912*x[4] + 1073741824*x[3] + 2147483648*x[2]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 134217728*x[7] + 268435456*x[6] + 536870912*x[5] + 1073741824*x[4] + 2147483648*x[3]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 268435456*x[7] + 536870912*x[6] + 1073741824*x[5] + 2147483648*x[4]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 536870912*x[7] + 1073741824*x[6] + 2147483648*x[5]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1073741824*x[7] + 2147483648*x[6]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[7]))
--def SLL1_16 [Field f] : Subtable f 16 :=
  --subtableFromMLE (fun x => 0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[7] + 2*x[6] + 4*x[5] + 8*x[4] + 16*x[3] + 32*x[2] + 64*x[1] + 128*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2*x[7] + 4*x[6] + 8*x[5] + 16*x[4] + 32*x[3] + 64*x[2] + 128*x[1] + 256*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 4*x[7] + 8*x[6] + 16*x[5] + 32*x[4] + 64*x[3] + 128*x[2] + 256*x[1] + 512*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 8*x[7] + 16*x[6] + 32*x[5] + 64*x[4] + 128*x[3] + 256*x[2] + 512*x[1] + 1024*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 16*x[7] + 32*x[6] + 64*x[5] + 128*x[4] + 256*x[3] + 512*x[2] + 1024*x[1] + 2048*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 32*x[7] + 64*x[6] + 128*x[5] + 256*x[4] + 512*x[3] + 1024*x[2] + 2048*x[1] + 4096*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 64*x[7] + 128*x[6] + 256*x[5] + 512*x[4] + 1024*x[3] + 2048*x[2] + 4096*x[1] + 8192*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 128*x[7] + 256*x[6] + 512*x[5] + 1024*x[4] + 2048*x[3] + 4096*x[2] + 8192*x[1] + 16384*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 256*x[7] + 512*x[6] + 1024*x[5] + 2048*x[4] + 4096*x[3] + 8192*x[2] + 16384*x[1] + 32768*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 512*x[7] + 1024*x[6] + 2048*x[5] + 4096*x[4] + 8192*x[3] + 16384*x[2] + 32768*x[1] + 65536*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1024*x[7] + 2048*x[6] + 4096*x[5] + 8192*x[4] + 16384*x[3] + 32768*x[2] + 65536*x[1] + 131072*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2048*x[7] + 4096*x[6] + 8192*x[5] + 16384*x[4] + 32768*x[3] + 65536*x[2] + 131072*x[1] + 262144*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 4096*x[7] + 8192*x[6] + 16384*x[5] + 32768*x[4] + 65536*x[3] + 131072*x[2] + 262144*x[1] + 524288*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 8192*x[7] + 16384*x[6] + 32768*x[5] + 65536*x[4] + 131072*x[3] + 262144*x[2] + 524288*x[1] + 1048576*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 16384*x[7] + 32768*x[6] + 65536*x[5] + 131072*x[4] + 262144*x[3] + 524288*x[2] + 1048576*x[1] + 2097152*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 32768*x[7] + 65536*x[6] + 131072*x[5] + 262144*x[4] + 524288*x[3] + 1048576*x[2] + 2097152*x[1] + 4194304*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 65536*x[7] + 131072*x[6] + 262144*x[5] + 524288*x[4] + 1048576*x[3] + 2097152*x[2] + 4194304*x[1] + 8388608*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 131072*x[7] + 262144*x[6] + 524288*x[5] + 1048576*x[4] + 2097152*x[3] + 4194304*x[2] + 8388608*x[1]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 262144*x[7] + 524288*x[6] + 1048576*x[5] + 2097152*x[4] + 4194304*x[3] + 8388608*x[2]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 524288*x[7] + 1048576*x[6] + 2097152*x[5] + 4194304*x[4] + 8388608*x[3]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1048576*x[7] + 2097152*x[6] + 4194304*x[5] + 8388608*x[4]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2097152*x[7] + 4194304*x[6] + 8388608*x[5]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 4194304*x[7] + 8388608*x[6]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 8388608*x[7]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0)
--def SLL2_16 [Field f] : Subtable f 16 :=
 -- subtableFromMLE (fun x => 0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[7] + 2*x[6] + 4*x[5] + 8*x[4] + 16*x[3] + 32*x[2] + 64*x[1] + 128*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2*x[7] + 4*x[6] + 8*x[5] + 16*x[4] + 32*x[3] + 64*x[2] + 128*x[1] + 256*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 4*x[7] + 8*x[6] + 16*x[5] + 32*x[4] + 64*x[3] + 128*x[2] + 256*x[1] + 512*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 8*x[7] + 16*x[6] + 32*x[5] + 64*x[4] + 128*x[3] + 256*x[2] + 512*x[1] + 1024*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 16*x[7] + 32*x[6] + 64*x[5] + 128*x[4] + 256*x[3] + 512*x[2] + 1024*x[1] + 2048*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 32*x[7] + 64*x[6] + 128*x[5] + 256*x[4] + 512*x[3] + 1024*x[2] + 2048*x[1] + 4096*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 64*x[7] + 128*x[6] + 256*x[5] + 512*x[4] + 1024*x[3] + 2048*x[2] + 4096*x[1] + 8192*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 128*x[7] + 256*x[6] + 512*x[5] + 1024*x[4] + 2048*x[3] + 4096*x[2] + 8192*x[1] + 16384*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 256*x[7] + 512*x[6] + 1024*x[5] + 2048*x[4] + 4096*x[3] + 8192*x[2] + 16384*x[1] + 32768*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 512*x[7] + 1024*x[6] + 2048*x[5] + 4096*x[4] + 8192*x[3] + 16384*x[2] + 32768*x[1]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1024*x[7] + 2048*x[6] + 4096*x[5] + 8192*x[4] + 16384*x[3] + 32768*x[2]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2048*x[7] + 4096*x[6] + 8192*x[5] + 16384*x[4] + 32768*x[3]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 4096*x[7] + 8192*x[6] + 16384*x[5] + 32768*x[4]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 8192*x[7] + 16384*x[6] + 32768*x[5]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 16384*x[7] + 32768*x[6]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 32768*x[7]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0)
def SLL3_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => 0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[7] + 2*x[6] + 4*x[5] + 8*x[4] + 16*x[3] + 32*x[2] + 64*x[1] + 128*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2*x[7] + 4*x[6] + 8*x[5] + 16*x[4] + 32*x[3] + 64*x[2] + 128*x[1]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 4*x[7] + 8*x[6] + 16*x[5] + 32*x[4] + 64*x[3] + 128*x[2]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 8*x[7] + 16*x[6] + 32*x[5] + 64*x[4] + 128*x[3]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 16*x[7] + 32*x[6] + 64*x[5] + 128*x[4]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 32*x[7] + 64*x[6] + 128*x[5]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 64*x[7] + 128*x[6]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 128*x[7]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0)
--def SRA_SIGN_16 [Field f] : Subtable f 16 :=
 --subtableFromMLE (fun x => 0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2147483648*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0] + 65536*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0] + 65536*x[0] + 32768*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0] + 65536*x[0] + 32768*x[0] + 16384*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0] + 65536*x[0] + 32768*x[0] + 16384*x[0] + 8192*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0] + 65536*x[0] + 32768*x[0] + 16384*x[0] + 8192*x[0] + 4096*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0] + 65536*x[0] + 32768*x[0] + 16384*x[0] + 8192*x[0] + 4096*x[0] + 2048*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0] + 65536*x[0] + 32768*x[0] + 16384*x[0] + 8192*x[0] + 4096*x[0] + 2048*x[0] + 1024*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0] + 65536*x[0] + 32768*x[0] + 16384*x[0] + 8192*x[0] + 4096*x[0] + 2048*x[0] + 1024*x[0] + 512*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0] + 65536*x[0] + 32768*x[0] + 16384*x[0] + 8192*x[0] + 4096*x[0] + 2048*x[0] + 1024*x[0] + 512*x[0] + 256*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0] + 65536*x[0] + 32768*x[0] + 16384*x[0] + 8192*x[0] + 4096*x[0] + 2048*x[0] + 1024*x[0] + 512*x[0] + 256*x[0] + 128*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0] + 65536*x[0] + 32768*x[0] + 16384*x[0] + 8192*x[0] + 4096*x[0] + 2048*x[0] + 1024*x[0] + 512*x[0] + 256*x[0] + 128*x[0] + 64*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0] + 65536*x[0] + 32768*x[0] + 16384*x[0] + 8192*x[0] + 4096*x[0] + 2048*x[0] + 1024*x[0] + 512*x[0] + 256*x[0] + 128*x[0] + 64*x[0] + 32*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0] + 65536*x[0] + 32768*x[0] + 16384*x[0] + 8192*x[0] + 4096*x[0] + 2048*x[0] + 1024*x[0] + 512*x[0] + 256*x[0] + 128*x[0] + 64*x[0] + 32*x[0] + 16*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0] + 65536*x[0] + 32768*x[0] + 16384*x[0] + 8192*x[0] + 4096*x[0] + 2048*x[0] + 1024*x[0] + 512*x[0] + 256*x[0] + 128*x[0] + 64*x[0] + 32*x[0] + 16*x[0] + 8*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0] + 65536*x[0] + 32768*x[0] + 16384*x[0] + 8192*x[0] + 4096*x[0] + 2048*x[0] + 1024*x[0] + 512*x[0] + 256*x[0] + 128*x[0] + 64*x[0] + 32*x[0] + 16*x[0] + 8*x[0] + 4*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2147483648*x[0] + 1073741824*x[0] + 536870912*x[0] + 268435456*x[0] + 134217728*x[0] + 67108864*x[0] + 33554432*x[0] + 16777216*x[0] + 8388608*x[0] + 4194304*x[0] + 2097152*x[0] + 1048576*x[0] + 524288*x[0] + 262144*x[0] + 131072*x[0] + 65536*x[0] + 32768*x[0] + 16384*x[0] + 8192*x[0] + 4096*x[0] + 2048*x[0] + 1024*x[0] + 512*x[0] + 256*x[0] + 128*x[0] + 64*x[0] + 32*x[0] + 16*x[0] + 8*x[0] + 4*x[0] + 2*x[0]))
-- def SRL0_16 [Field f] : Subtable f 16 :=
 --- subtableFromMLE (fun x => 0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[7] + 2*x[6] + 4*x[5] + 8*x[4] + 16*x[3] + 32*x[2] + 64*x[1] + 128*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[6] + 2*x[5] + 4*x[4] + 8*x[3] + 16*x[2] + 32*x[1] + 64*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[5] + 2*x[4] + 4*x[3] + 8*x[2] + 16*x[1] + 32*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[4] + 2*x[3] + 4*x[2] + 8*x[1] + 16*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[3] + 2*x[2] + 4*x[1] + 8*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[2] + 2*x[1] + 4*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[1] + 2*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0)
--def SRL1_16 [Field f] : Subtable f 16 :=
 -- subtableFromMLE (fun x => 0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 256*x[7] + 512*x[6] + 1024*x[5] + 2048*x[4] + 4096*x[3] + 8192*x[2] + 16384*x[1] + 32768*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 128*x[7] + 256*x[6] + 512*x[5] + 1024*x[4] + 2048*x[3] + 4096*x[2] + 8192*x[1] + 16384*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 64*x[7] + 128*x[6] + 256*x[5] + 512*x[4] + 1024*x[3] + 2048*x[2] + 4096*x[1] + 8192*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 32*x[7] + 64*x[6] + 128*x[5] + 256*x[4] + 512*x[3] + 1024*x[2] + 2048*x[1] + 4096*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 16*x[7] + 32*x[6] + 64*x[5] + 128*x[4] + 256*x[3] + 512*x[2] + 1024*x[1] + 2048*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 8*x[7] + 16*x[6] + 32*x[5] + 64*x[4] + 128*x[3] + 256*x[2] + 512*x[1] + 1024*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 4*x[7] + 8*x[6] + 16*x[5] + 32*x[4] + 64*x[3] + 128*x[2] + 256*x[1] + 512*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2*x[7] + 4*x[6] + 8*x[5] + 16*x[4] + 32*x[3] + 64*x[2] + 128*x[1] + 256*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[7] + 2*x[6] + 4*x[5] + 8*x[4] + 16*x[3] + 32*x[2] + 64*x[1] + 128*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[6] + 2*x[5] + 4*x[4] + 8*x[3] + 16*x[2] + 32*x[1] + 64*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[5] + 2*x[4] + 4*x[3] + 8*x[2] + 16*x[1] + 32*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[4] + 2*x[3] + 4*x[2] + 8*x[1] + 16*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[3] + 2*x[2] + 4*x[1] + 8*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[2] + 2*x[1] + 4*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[1] + 2*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0)
--def SRL2_16 [Field f] : Subtable f 16 :=
 -- subtableFromMLE (fun x => 0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 65536*x[7] + 131072*x[6] + 262144*x[5] + 524288*x[4] + 1048576*x[3] + 2097152*x[2] + 4194304*x[1] + 8388608*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 32768*x[7] + 65536*x[6] + 131072*x[5] + 262144*x[4] + 524288*x[3] + 1048576*x[2] + 2097152*x[1] + 4194304*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 16384*x[7] + 32768*x[6] + 65536*x[5] + 131072*x[4] + 262144*x[3] + 524288*x[2] + 1048576*x[1] + 2097152*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 8192*x[7] + 16384*x[6] + 32768*x[5] + 65536*x[4] + 131072*x[3] + 262144*x[2] + 524288*x[1] + 1048576*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 4096*x[7] + 8192*x[6] + 16384*x[5] + 32768*x[4] + 65536*x[3] + 131072*x[2] + 262144*x[1] + 524288*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2048*x[7] + 4096*x[6] + 8192*x[5] + 16384*x[4] + 32768*x[3] + 65536*x[2] + 131072*x[1] + 262144*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1024*x[7] + 2048*x[6] + 4096*x[5] + 8192*x[4] + 16384*x[3] + 32768*x[2] + 65536*x[1] + 131072*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 512*x[7] + 1024*x[6] + 2048*x[5] + 4096*x[4] + 8192*x[3] + 16384*x[2] + 32768*x[1] + 65536*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 256*x[7] + 512*x[6] + 1024*x[5] + 2048*x[4] + 4096*x[3] + 8192*x[2] + 16384*x[1] + 32768*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 128*x[7] + 256*x[6] + 512*x[5] + 1024*x[4] + 2048*x[3] + 4096*x[2] + 8192*x[1] + 16384*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 64*x[7] + 128*x[6] + 256*x[5] + 512*x[4] + 1024*x[3] + 2048*x[2] + 4096*x[1] + 8192*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 32*x[7] + 64*x[6] + 128*x[5] + 256*x[4] + 512*x[3] + 1024*x[2] + 2048*x[1] + 4096*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 16*x[7] + 32*x[6] + 64*x[5] + 128*x[4] + 256*x[3] + 512*x[2] + 1024*x[1] + 2048*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 8*x[7] + 16*x[6] + 32*x[5] + 64*x[4] + 128*x[3] + 256*x[2] + 512*x[1] + 1024*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 4*x[7] + 8*x[6] + 16*x[5] + 32*x[4] + 64*x[3] + 128*x[2] + 256*x[1] + 512*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2*x[7] + 4*x[6] + 8*x[5] + 16*x[4] + 32*x[3] + 64*x[2] + 128*x[1] + 256*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1*x[7] + 2*x[6] + 4*x[5] + 8*x[4] + 16*x[3] + 32*x[2] + 64*x[1] + 128*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1*x[6] + 2*x[5] + 4*x[4] + 8*x[3] + 16*x[2] + 32*x[1] + 64*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1*x[5] + 2*x[4] + 4*x[3] + 8*x[2] + 16*x[1] + 32*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1*x[4] + 2*x[3] + 4*x[2] + 8*x[1] + 16*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1*x[3] + 2*x[2] + 4*x[1] + 8*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1*x[2] + 2*x[1] + 4*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1*x[1] + 2*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0 + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*0)
--def SRL3_16 [Field f] : Subtable f 16 :=
  --subtableFromMLE (fun x => 0 + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 16777216*x[7] + 33554432*x[6] + 67108864*x[5] + 134217728*x[4] + 268435456*x[3] + 536870912*x[2] + 1073741824*x[1] + 2147483648*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 8388608*x[7] + 16777216*x[6] + 33554432*x[5] + 67108864*x[4] + 134217728*x[3] + 268435456*x[2] + 536870912*x[1] + 1073741824*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 4194304*x[7] + 8388608*x[6] + 16777216*x[5] + 33554432*x[4] + 67108864*x[3] + 134217728*x[2] + 268435456*x[1] + 536870912*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2097152*x[7] + 4194304*x[6] + 8388608*x[5] + 16777216*x[4] + 33554432*x[3] + 67108864*x[2] + 134217728*x[1] + 268435456*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1048576*x[7] + 2097152*x[6] + 4194304*x[5] + 8388608*x[4] + 16777216*x[3] + 33554432*x[2] + 67108864*x[1] + 134217728*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 524288*x[7] + 1048576*x[6] + 2097152*x[5] + 4194304*x[4] + 8388608*x[3] + 16777216*x[2] + 33554432*x[1] + 67108864*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 262144*x[7] + 524288*x[6] + 1048576*x[5] + 2097152*x[4] + 4194304*x[3] + 8388608*x[2] + 16777216*x[1] + 33554432*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 131072*x[7] + 262144*x[6] + 524288*x[5] + 1048576*x[4] + 2097152*x[3] + 4194304*x[2] + 8388608*x[1] + 16777216*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 65536*x[7] + 131072*x[6] + 262144*x[5] + 524288*x[4] + 1048576*x[3] + 2097152*x[2] + 4194304*x[1] + 8388608*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 32768*x[7] + 65536*x[6] + 131072*x[5] + 262144*x[4] + 524288*x[3] + 1048576*x[2] + 2097152*x[1] + 4194304*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 16384*x[7] + 32768*x[6] + 65536*x[5] + 131072*x[4] + 262144*x[3] + 524288*x[2] + 1048576*x[1] + 2097152*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 8192*x[7] + 16384*x[6] + 32768*x[5] + 65536*x[4] + 131072*x[3] + 262144*x[2] + 524288*x[1] + 1048576*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 4096*x[7] + 8192*x[6] + 16384*x[5] + 32768*x[4] + 65536*x[3] + 131072*x[2] + 262144*x[1] + 524288*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 2048*x[7] + 4096*x[6] + 8192*x[5] + 16384*x[4] + 32768*x[3] + 65536*x[2] + 131072*x[1] + 262144*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 1024*x[7] + 2048*x[6] + 4096*x[5] + 8192*x[4] + 16384*x[3] + 32768*x[2] + 65536*x[1] + 131072*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(0*x[11] + (1 - 0)*(1 - x[11]))*(0 + 512*x[7] + 1024*x[6] + 2048*x[5] + 4096*x[4] + 8192*x[3] + 16384*x[2] + 32768*x[1] + 65536*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 256*x[7] + 512*x[6] + 1024*x[5] + 2048*x[4] + 4096*x[3] + 8192*x[2] + 16384*x[1] + 32768*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 128*x[7] + 256*x[6] + 512*x[5] + 1024*x[4] + 2048*x[3] + 4096*x[2] + 8192*x[1] + 16384*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 64*x[7] + 128*x[6] + 256*x[5] + 512*x[4] + 1024*x[3] + 2048*x[2] + 4096*x[1] + 8192*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 32*x[7] + 64*x[6] + 128*x[5] + 256*x[4] + 512*x[3] + 1024*x[2] + 2048*x[1] + 4096*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 16*x[7] + 32*x[6] + 64*x[5] + 128*x[4] + 256*x[3] + 512*x[2] + 1024*x[1] + 2048*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 8*x[7] + 16*x[6] + 32*x[5] + 64*x[4] + 128*x[3] + 256*x[2] + 512*x[1] + 1024*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 4*x[7] + 8*x[6] + 16*x[5] + 32*x[4] + 64*x[3] + 128*x[2] + 256*x[1] + 512*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(0*x[12] + (1 - 0)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 2*x[7] + 4*x[6] + 8*x[5] + 16*x[4] + 32*x[3] + 64*x[2] + 128*x[1] + 256*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1*x[7] + 2*x[6] + 4*x[5] + 8*x[4] + 16*x[3] + 32*x[2] + 64*x[1] + 128*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1*x[6] + 2*x[5] + 4*x[4] + 8*x[3] + 16*x[2] + 32*x[1] + 64*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1*x[5] + 2*x[4] + 4*x[3] + 8*x[2] + 16*x[1] + 32*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(0*x[13] + (1 - 0)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1*x[4] + 2*x[3] + 4*x[2] + 8*x[1] + 16*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1*x[3] + 2*x[2] + 4*x[1] + 8*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(0*x[14] + (1 - 0)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1*x[2] + 2*x[1] + 4*x[0]) + 1*(0*x[15] + (1 - 0)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1*x[1] + 2*x[0]) + 1*(1*x[15] + (1 - 1)*(1 - x[15]))*(1*x[14] + (1 - 1)*(1 - x[14]))*(1*x[13] + (1 - 1)*(1 - x[13]))*(1*x[12] + (1 - 1)*(1 - x[12]))*(1*x[11] + (1 - 1)*(1 - x[11]))*(0 + 1*x[0]))
def XOR_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => 0 + 1*((1 - x[7])*x[15] + x[7]*(1 - x[15])) + 2*((1 - x[6])*x[14] + x[6]*(1 - x[14])) + 4*((1 - x[5])*x[13] + x[5]*(1 - x[13])) + 8*((1 - x[4])*x[12] + x[4]*(1 - x[12])) + 16*((1 - x[3])*x[11] + x[3]*(1 - x[11])) + 32*((1 - x[2])*x[10] + x[2]*(1 - x[10])) + 64*((1 - x[1])*x[9] + x[1]*(1 - x[9])) + 128*((1 - x[0])*x[8] + x[0]*(1 - x[8])))
def LEFT_IS_ZERO_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => 1*(1 - x[0])*(1 - x[1])*(1 - x[2])*(1 - x[3])*(1 - x[4])*(1 - x[5])*(1 - x[6])*(1 - x[7]))
def RIGHT_IS_ZERO_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => 1*(1 - x[8])*(1 - x[9])*(1 - x[10])*(1 - x[11])*(1 - x[12])*(1 - x[13])*(1 - x[14])*(1 - x[15]))
def DIV_BY_ZERO_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => 1*(1 - x[0])*x[8]*(1 - x[1])*x[9]*(1 - x[2])*x[10]*(1 - x[3])*x[11]*(1 - x[4])*x[12]*(1 - x[5])*x[13]*(1 - x[6])*x[14]*(1 - x[7])*x[15])
def LSB_16 [Field f] : Subtable f 16 :=
  subtableFromMLE (fun x => x[15])



set_option maxHeartbeats  20000000000000000


lemma sll_3_mle_one_chunk_liza[ZKField f] (bv1 bv2 : BitVec 8) (fv1 fv2 : Vector f 8) :
  some bvoutput = map_f_to_bv_32 foutput ->
   some (bool_to_bv_32 bv1[7])  = map_f_to_bv_32 fv1[0]  ->
   some (bool_to_bv_32 bv1[6]) = map_f_to_bv_32 fv1[1]  ->
   some (bool_to_bv_32 bv1[5]) = map_f_to_bv_32 fv1[2]  ->
   some (bool_to_bv_32 bv1[4]) = map_f_to_bv_32 fv1[3]  ->
   some (bool_to_bv_32 bv1[3]) = map_f_to_bv_32 fv1[4]  ->
  some (bool_to_bv_32 bv1[2]) = map_f_to_bv_32 fv1[5]  ->
   some (bool_to_bv_32 bv1[1]) = map_f_to_bv_32 fv1[6]  ->
   some (bool_to_bv_32 bv1[0]) = map_f_to_bv_32 fv1[7]  ->
  some (bool_to_bv_32 bv2[7]) = map_f_to_bv_32 fv2[0]  ->
  some (bool_to_bv_32 bv2[6]) = map_f_to_bv_32 fv2[1]  ->
  some (bool_to_bv_32 bv2[5]) = map_f_to_bv_32 fv2[2]  ->
  some (bool_to_bv_32 bv2[4]) = map_f_to_bv_32 fv2[3]  ->
  some (bool_to_bv_32 bv2[3]) = map_f_to_bv_32 fv2[4]  ->
  some (bool_to_bv_32 bv2[2]) = map_f_to_bv_32 fv2[5]  ->
  some (bool_to_bv_32 bv2[1]) = map_f_to_bv_32 fv2[6]  ->
  some (bool_to_bv_32 bv2[0]) = map_f_to_bv_32 fv2[7]  ->
  bv2[7] = false ->
  bv2[6] = false ->
  bv2[5] = false ->
  (bvoutput = ((bv1.zeroExtend 8) <<< bv2.toNat).zeroExtend 32)
  =
  (foutput = evalSubtable SLL3_16 (Vector.append fv1 fv2))
 := by
    -- set up hypothesis
    intros h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17 h18 h19 h20
    rw [extract_bv_rel_32] at h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rcases h2 with ⟨h2_1, h2_2⟩
    rcases h3 with ⟨h3_1, h3_2⟩
    rcases h4 with ⟨h4_1, h4_2⟩
    rcases h5 with ⟨h5_1, h5_2⟩
    rcases h6 with ⟨h6_1, h6_2⟩
    rcases h7 with ⟨h7_1, h7_2⟩
    rcases h8 with ⟨h8_1, h8_2⟩
    rcases h9 with ⟨h9_1, h9_2⟩
    rcases h10 with ⟨h10_1, h10_2⟩
    rcases h11 with ⟨h11_1, h11_2⟩
    rcases h12 with ⟨h12_1, h12_2⟩
    rcases h13 with ⟨h13_1, h13_2⟩
    rcases h14 with ⟨h14_1, h14_2⟩
    rcases h15 with ⟨h15_1, h15_2⟩
    rcases h16 with ⟨h16_1, h16_2⟩
    rcases h17 with ⟨h17_1, h17_2⟩
    unfold map_f_to_bv_32 at h1
    simp at h1
    rcases h1 with ⟨h1_1, h1_2⟩
    -- apply val and unfold subtables
    rw [ZMod.eq_if_val]
    unfold SLL3_16
    unfold evalSubtable
    simp
    unfold subtableFromMLE
    simp
    unfold Vector.append
    simp
    --- zmod to nat
    valify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    simp
    rw [Nat.mod_eq_of_lt]
    rw [BitVec.ofNat_eq_iff_32]
    -- apply bv and nat to zmod
    bvify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    -- necessary because of Lean version this can do away
    set a := foutput.val
    set b10:= ZMod.val fv1[0]
    set b11 := ZMod.val fv1[1]
    set b12 := ZMod.val fv1[2]
    set b13 := ZMod.val fv1[3]
    set b14 := ZMod.val fv1[4]
    set b15 := ZMod.val fv1[5]
    set b16 := ZMod.val fv1[6]
    set b17 := ZMod.val fv1[7]
    set b20:= ZMod.val fv2[0]
    set b21 := ZMod.val fv2[1]
    set b22 := ZMod.val fv2[2]
    set b23 := ZMod.val fv2[3]
    set b24 := ZMod.val fv2[4]
    set b25 := ZMod.val fv2[5]
    set b26 := ZMod.val fv2[6]
    set b27 := ZMod.val fv2[7]
    bv_normalize
    --bv_decide
    bv_decide
    exact h1_1
    --norm_num
    --- range analysis tactic
    --grind
   -- sorry
    try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]




lemma xor_mle_one_chunk_liza[ZKField f] (bv1 bv2 : BitVec 8) (fv1 fv2 : Vector f 8) :
  some bvoutput = map_f_to_bv foutput ->
   some (bool_to_bv bv1[7])  = map_f_to_bv fv1[0]  ->
   some (bool_to_bv bv1[6]) = map_f_to_bv fv1[1]  ->
   some (bool_to_bv bv1[5]) = map_f_to_bv fv1[2]  ->
   some (bool_to_bv bv1[4]) = map_f_to_bv fv1[3]  ->
   some (bool_to_bv bv1[3]) = map_f_to_bv fv1[4]  ->
   some (bool_to_bv bv1[2]) = map_f_to_bv fv1[5]  ->
   some (bool_to_bv bv1[1]) = map_f_to_bv fv1[6]  ->
   some (bool_to_bv bv1[0]) = map_f_to_bv fv1[7]  ->
  some (bool_to_bv bv2[7]) = map_f_to_bv fv2[0]  ->
  some (bool_to_bv bv2[6]) = map_f_to_bv fv2[1]  ->
  some (bool_to_bv bv2[5]) = map_f_to_bv fv2[2]  ->
  some (bool_to_bv bv2[4]) = map_f_to_bv fv2[3]  ->
  some (bool_to_bv bv2[3]) = map_f_to_bv fv2[4]  ->
  some (bool_to_bv bv2[2]) = map_f_to_bv fv2[5]  ->
  some (bool_to_bv bv2[1]) = map_f_to_bv fv2[6]  ->
  some (bool_to_bv bv2[0]) = map_f_to_bv fv2[7]  ->
  (bvoutput = BitVec.xor bv1 bv2)
  =
  (foutput = evalSubtable XOR_16 (Vector.append fv1 fv2))
:= by
   -- set up hypothesis
    intros h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rw [extract_bv_rel] at h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rcases h2 with ⟨h2_1, h2_2⟩
    rcases h3 with ⟨h3_1, h3_2⟩
    rcases h4 with ⟨h4_1, h4_2⟩
    rcases h5 with ⟨h5_1, h5_2⟩
    rcases h6 with ⟨h6_1, h6_2⟩
    rcases h7 with ⟨h7_1, h7_2⟩
    rcases h8 with ⟨h8_1, h8_2⟩
    rcases h9 with ⟨h9_1, h9_2⟩
    rcases h10 with ⟨h10_1, h10_2⟩
    rcases h11 with ⟨h11_1, h11_2⟩
    rcases h12 with ⟨h12_1, h12_2⟩
    rcases h13 with ⟨h13_1, h13_2⟩
    rcases h14 with ⟨h14_1, h14_2⟩
    rcases h15 with ⟨h15_1, h15_2⟩
    rcases h16 with ⟨h16_1, h16_2⟩
    rcases h17 with ⟨h17_1, h17_2⟩
    unfold map_f_to_bv at h1
    simp at h1
    rcases h1 with ⟨h1_1, h1_2⟩
    -- apply val and unfold subtables
    rw [ZMod.eq_if_val]
    unfold XOR_16
    unfold evalSubtable
    simp
    unfold subtableFromMLE
    simp
    unfold Vector.append
    simp
    --- zmod to nat
    valify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    simp
    rw [Nat.mod_eq_of_lt]
    rw [BitVec.ofNat_eq_iff]
    -- apply bv and nat to zmod
    bvify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    -- necessary because of Lean version this can do away
    set a := foutput.val
    set b10:= ZMod.val fv1[0]
    set b11 := ZMod.val fv1[1]
    set b12 := ZMod.val fv1[2]
    set b13 := ZMod.val fv1[3]
    set b14 := ZMod.val fv1[4]
    set b15 := ZMod.val fv1[5]
    set b16 := ZMod.val fv1[6]
    set b17 := ZMod.val fv1[7]
    set b20:= ZMod.val fv2[0]
    set b21 := ZMod.val fv2[1]
    set b22 := ZMod.val fv2[2]
    set b23 := ZMod.val fv2[3]
    set b24 := ZMod.val fv2[4]
    set b25 := ZMod.val fv2[5]
    set b26 := ZMod.val fv2[6]
    set b27 := ZMod.val fv2[7]
    bv_decide
    exact h1_1
    try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]



lemma sll_0_mle_one_chunk_liza[ZKField f] (bv1 bv2 : BitVec 8) (fv1 fv2 : Vector f 8) :
  some bvoutput = map_f_to_bv_32 foutput ->
   some (bool_to_bv_32 bv1[7])  = map_f_to_bv_32 fv1[0]  ->
   some (bool_to_bv_32 bv1[6]) = map_f_to_bv_32 fv1[1]  ->
   some (bool_to_bv_32 bv1[5]) = map_f_to_bv_32 fv1[2]  ->
   some (bool_to_bv_32 bv1[4]) = map_f_to_bv_32 fv1[3]  ->
   some (bool_to_bv_32 bv1[3]) = map_f_to_bv_32 fv1[4]  ->
  some (bool_to_bv_32 bv1[2]) = map_f_to_bv_32 fv1[5]  ->
   some (bool_to_bv_32 bv1[1]) = map_f_to_bv_32 fv1[6]  ->
   some (bool_to_bv_32 bv1[0]) = map_f_to_bv_32 fv1[7]  ->
  some (bool_to_bv_32 bv2[7]) = map_f_to_bv_32 fv2[0]  ->
  some (bool_to_bv_32 bv2[6]) = map_f_to_bv_32 fv2[1]  ->
  some (bool_to_bv_32 bv2[5]) = map_f_to_bv_32 fv2[2]  ->
  some (bool_to_bv_32 bv2[4]) = map_f_to_bv_32 fv2[3]  ->
  some (bool_to_bv_32 bv2[3]) = map_f_to_bv_32 fv2[4]  ->
  some (bool_to_bv_32 bv2[2]) = map_f_to_bv_32 fv2[5]  ->
  some (bool_to_bv_32 bv2[1]) = map_f_to_bv_32 fv2[6]  ->
  some (bool_to_bv_32 bv2[0]) = map_f_to_bv_32 fv2[7]  ->
  bv2[7] = false ->
  bv2[6] = false ->
  bv2[5] = false ->
  (bvoutput = (bv1.zeroExtend 32) <<< bv2.toNat)
  =
  (foutput = evalSubtable SLL0_16 (Vector.append fv1 fv2))
 := by
    -- set up hypothesis
    intros h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17 h18 h19 h20
    rw [extract_bv_rel_32] at h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rcases h2 with ⟨h2_1, h2_2⟩
    rcases h3 with ⟨h3_1, h3_2⟩
    rcases h4 with ⟨h4_1, h4_2⟩
    rcases h5 with ⟨h5_1, h5_2⟩
    rcases h6 with ⟨h6_1, h6_2⟩
    rcases h7 with ⟨h7_1, h7_2⟩
    rcases h8 with ⟨h8_1, h8_2⟩
    rcases h9 with ⟨h9_1, h9_2⟩
    rcases h10 with ⟨h10_1, h10_2⟩
    rcases h11 with ⟨h11_1, h11_2⟩
    rcases h12 with ⟨h12_1, h12_2⟩
    rcases h13 with ⟨h13_1, h13_2⟩
    rcases h14 with ⟨h14_1, h14_2⟩
    rcases h15 with ⟨h15_1, h15_2⟩
    rcases h16 with ⟨h16_1, h16_2⟩
    rcases h17 with ⟨h17_1, h17_2⟩
    unfold map_f_to_bv_32 at h1
    simp at h1
    rcases h1 with ⟨h1_1, h1_2⟩
    -- apply val and unfold subtables
    rw [ZMod.eq_if_val]
    unfold SLL0_16
    unfold evalSubtable
    simp
    unfold subtableFromMLE
    simp
    unfold Vector.append
    simp
    --- zmod to nat
    valify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    simp
    rw [Nat.mod_eq_of_lt]
    rw [BitVec.ofNat_eq_iff_32]
    -- apply bv and nat to zmod
    bvify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    -- necessary because of Lean version this can do away
    set a := foutput.val
    set b10:= ZMod.val fv1[0]
    set b11 := ZMod.val fv1[1]
    set b12 := ZMod.val fv1[2]
    set b13 := ZMod.val fv1[3]
    set b14 := ZMod.val fv1[4]
    set b15 := ZMod.val fv1[5]
    set b16 := ZMod.val fv1[6]
    set b17 := ZMod.val fv1[7]
    set b20:= ZMod.val fv2[0]
    set b21 := ZMod.val fv2[1]
    set b22 := ZMod.val fv2[2]
    set b23 := ZMod.val fv2[3]
    set b24 := ZMod.val fv2[4]
    set b25 := ZMod.val fv2[5]
    set b26 := ZMod.val fv2[6]
    set b27 := ZMod.val fv2[7]
    bv_normalize
    --bv_decide
    bv_decide
    exact h1_1
    --norm_num
    --- range analysis tactic
    --grind
   -- sorry
    try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]



lemma identity_mle_one_chunk {bvoutput foutput} [ZKField f] (bv1 bv2 : BitVec 8) (fv1 fv2 : Vector f 8) :
  some bvoutput = map_f_to_bv_16 foutput ->
   some (bool_to_bv_16 bv1[7])  = map_f_to_bv_16 fv1[0]  ->
   some (bool_to_bv_16 bv1[6]) = map_f_to_bv_16 fv1[1]  ->
   some (bool_to_bv_16 bv1[5]) = map_f_to_bv_16 fv1[2]  ->
   some (bool_to_bv_16 bv1[4]) = map_f_to_bv_16 fv1[3]  ->
   some (bool_to_bv_16 bv1[3]) = map_f_to_bv_16 fv1[4]  ->
  some (bool_to_bv_16 bv1[2]) = map_f_to_bv_16 fv1[5]  ->
   some (bool_to_bv_16 bv1[1]) = map_f_to_bv_16 fv1[6]  ->
   some (bool_to_bv_16 bv1[0]) = map_f_to_bv_16 fv1[7]  ->
  some (bool_to_bv_16 bv2[7]) = map_f_to_bv_16 fv2[0]  ->
  some (bool_to_bv_16 bv2[6]) = map_f_to_bv_16 fv2[1]  ->
  some (bool_to_bv_16 bv2[5]) = map_f_to_bv_16 fv2[2]  ->
  some (bool_to_bv_16 bv2[4]) = map_f_to_bv_16 fv2[3]  ->
  some (bool_to_bv_16 bv2[3]) = map_f_to_bv_16 fv2[4]  ->
  some (bool_to_bv_16 bv2[2]) = map_f_to_bv_16 fv2[5]  ->
  some (bool_to_bv_16 bv2[1]) = map_f_to_bv_16 fv2[6]  ->
  some (bool_to_bv_16 bv2[0]) = map_f_to_bv_16 fv2[7]  ->
  (bvoutput = BitVec.append bv1 bv2 )
  =
  (foutput = evalSubtable IDENTITY_16 (Vector.append fv1 fv2))
 := by
    intros h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rw [extract_bv_rel_16] at h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rcases h2 with ⟨h2_1, h2_2⟩
    rcases h3 with ⟨h3_1, h3_2⟩
    rcases h4 with ⟨h4_1, h4_2⟩
    rcases h5 with ⟨h5_1, h5_2⟩
    rcases h6 with ⟨h6_1, h6_2⟩
    rcases h7 with ⟨h7_1, h7_2⟩
    rcases h8 with ⟨h8_1, h8_2⟩
    rcases h9 with ⟨h9_1, h9_2⟩
    rcases h10 with ⟨h10_1, h10_2⟩
    rcases h11 with ⟨h11_1, h11_2⟩
    rcases h12 with ⟨h12_1, h12_2⟩
    rcases h13 with ⟨h13_1, h13_2⟩
    rcases h14 with ⟨h14_1, h14_2⟩
    rcases h15 with ⟨h15_1, h15_2⟩
    rcases h16 with ⟨h16_1, h16_2⟩
    rcases h17 with ⟨h17_1, h17_2⟩
    unfold map_f_to_bv_16 at h1
    simp at h1
    rcases h1 with ⟨h1_1, h1_2⟩
    -- apply val and unfold subtables
    rw [ZMod.eq_if_val]
    unfold IDENTITY_16
    unfold evalSubtable
    simp
    unfold subtableFromMLE
    simp
    unfold Vector.append
    simp
    --- zmod to nat
    valify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    simp
    rw [Nat.mod_eq_of_lt]
    rw [BitVec.ofNat_eq_iff_16]
    -- apply bv and nat to zmod
    bvify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    -- necessary because of Lean version this can do away
    set a := foutput.val
    set b10:= ZMod.val fv1[0]
    set b11 := ZMod.val fv1[1]
    set b12 := ZMod.val fv1[2]
    set b13 := ZMod.val fv1[3]
    set b14 := ZMod.val fv1[4]
    set b15 := ZMod.val fv1[5]
    set b16 := ZMod.val fv1[6]
    set b17 := ZMod.val fv1[7]
    set b20:= ZMod.val fv2[0]
    set b21 := ZMod.val fv2[1]
    set b22 := ZMod.val fv2[2]
    set b23 := ZMod.val fv2[3]
    set b24 := ZMod.val fv2[4]
    set b25 := ZMod.val fv2[5]
    set b26 := ZMod.val fv2[6]
    set b27 := ZMod.val fv2[7]
    bv_normalize
    bv_decide
    exact h1_1
    --sorry
    try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]


lemma sign_extend_mle_one_chunk {bvoutput foutput} [ZKField f] (bv1 bv2 : BitVec 8) (fv1 fv2 : Vector f 8) :
  some bvoutput = map_f_to_bv_16 foutput ->
   some (bool_to_bv_16 bv1[7])  = map_f_to_bv_16 fv1[0]  ->
   some (bool_to_bv_16 bv1[6]) = map_f_to_bv_16 fv1[1]  ->
   some (bool_to_bv_16 bv1[5]) = map_f_to_bv_16 fv1[2]  ->
   some (bool_to_bv_16 bv1[4]) = map_f_to_bv_16 fv1[3]  ->
   some (bool_to_bv_16 bv1[3]) = map_f_to_bv_16 fv1[4]  ->
  some (bool_to_bv_16 bv1[2]) = map_f_to_bv_16 fv1[5]  ->
   some (bool_to_bv_16 bv1[1]) = map_f_to_bv_16 fv1[6]  ->
   some (bool_to_bv_16 bv1[0]) = map_f_to_bv_16 fv1[7]  ->
  some (bool_to_bv_16 bv2[7]) = map_f_to_bv_16 fv2[0]  ->
  some (bool_to_bv_16 bv2[6]) = map_f_to_bv_16 fv2[1]  ->
  some (bool_to_bv_16 bv2[5]) = map_f_to_bv_16 fv2[2]  ->
  some (bool_to_bv_16 bv2[4]) = map_f_to_bv_16 fv2[3]  ->
  some (bool_to_bv_16 bv2[3]) = map_f_to_bv_16 fv2[4]  ->
  some (bool_to_bv_16 bv2[2]) = map_f_to_bv_16 fv2[5]  ->
  some (bool_to_bv_16 bv2[1]) = map_f_to_bv_16 fv2[6]  ->
  some (bool_to_bv_16 bv2[0]) = map_f_to_bv_16 fv2[7]  ->
  (bvoutput = BitVec.fill 16 bv1[7])
  =
  (foutput = evalSubtable SIGN_EXTEND_16_16 (Vector.append fv1 fv2))
 := by
    intros h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rw [extract_bv_rel_16] at h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rcases h2 with ⟨h2_1, h2_2⟩
    rcases h3 with ⟨h3_1, h3_2⟩
    rcases h4 with ⟨h4_1, h4_2⟩
    rcases h5 with ⟨h5_1, h5_2⟩
    rcases h6 with ⟨h6_1, h6_2⟩
    rcases h7 with ⟨h7_1, h7_2⟩
    rcases h8 with ⟨h8_1, h8_2⟩
    rcases h9 with ⟨h9_1, h9_2⟩
    rcases h10 with ⟨h10_1, h10_2⟩
    rcases h11 with ⟨h11_1, h11_2⟩
    rcases h12 with ⟨h12_1, h12_2⟩
    rcases h13 with ⟨h13_1, h13_2⟩
    rcases h14 with ⟨h14_1, h14_2⟩
    rcases h15 with ⟨h15_1, h15_2⟩
    rcases h16 with ⟨h16_1, h16_2⟩
    rcases h17 with ⟨h17_1, h17_2⟩
    unfold map_f_to_bv_16 at h1
    simp at h1
    rcases h1 with ⟨h1_1, h1_2⟩
    -- apply val and unfold subtables
    rw [ZMod.eq_if_val]
    unfold SIGN_EXTEND_16_16
    unfold evalSubtable
    simp
    unfold subtableFromMLE
    simp
    unfold Vector.append
    simp
    unfold fill
    --- zmod to nat
    valify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    simp
    rw [Nat.mod_eq_of_lt]
    rw [BitVec.ofNat_eq_iff_16]
    -- apply bv and nat to zmod
    bvify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    --unfold bool_to_bv_16
    -- necessary because of Lean version this can do away
    set a := foutput.val
    set b10:= ZMod.val fv1[0]
    set b11 := ZMod.val fv1[1]
    set b12 := ZMod.val fv1[2]
    set b13 := ZMod.val fv1[3]
    set b14 := ZMod.val fv1[4]
    set b15 := ZMod.val fv1[5]
    set b16 := ZMod.val fv1[6]
    set b17 := ZMod.val fv1[7]
    set b20:= ZMod.val fv2[0]
    set b21 := ZMod.val fv2[1]
    set b22 := ZMod.val fv2[2]
    set b23 := ZMod.val fv2[3]
    set b24 := ZMod.val fv2[4]
    set b25 := ZMod.val fv2[5]
    set b26 := ZMod.val fv2[6]
    set b27 := ZMod.val fv2[7]

    bv_decide
    exact h1_1
    --sorry
    try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    --try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]






lemma and_mle_one_chunk_liza[ZKField f] (bv1 bv2 : BitVec 8) (fv1 fv2 : Vector f 8) :
  some bvoutput = map_f_to_bv foutput ->
   some (bool_to_bv bv1[7])  = map_f_to_bv fv1[0]  ->
   some (bool_to_bv bv1[6]) = map_f_to_bv fv1[1]  ->
   some (bool_to_bv bv1[5]) = map_f_to_bv fv1[2]  ->
   some (bool_to_bv bv1[4]) = map_f_to_bv fv1[3]  ->
   some (bool_to_bv bv1[3]) = map_f_to_bv fv1[4]  ->
  some (bool_to_bv bv1[2]) = map_f_to_bv fv1[5]  ->
   some (bool_to_bv bv1[1]) = map_f_to_bv fv1[6]  ->
   some (bool_to_bv bv1[0]) = map_f_to_bv fv1[7]  ->
  some (bool_to_bv bv2[7]) = map_f_to_bv fv2[0]  ->
  some (bool_to_bv bv2[6]) = map_f_to_bv fv2[1]  ->
  some (bool_to_bv bv2[5]) = map_f_to_bv fv2[2]  ->
  some (bool_to_bv bv2[4]) = map_f_to_bv fv2[3]  ->
  some (bool_to_bv bv2[3]) = map_f_to_bv fv2[4]  ->
  some (bool_to_bv bv2[2]) = map_f_to_bv fv2[5]  ->
  some (bool_to_bv bv2[1]) = map_f_to_bv fv2[6]  ->
  some (bool_to_bv bv2[0]) = map_f_to_bv fv2[7]  ->
  (bvoutput = bv1 &&& bv2)
  =
  (foutput = evalSubtable AND_16 (Vector.append fv1 fv2))
 := by
    -- set up hypothesis
    intros h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rw [extract_bv_rel] at h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rcases h2 with ⟨h2_1, h2_2⟩
    rcases h3 with ⟨h3_1, h3_2⟩
    rcases h4 with ⟨h4_1, h4_2⟩
    rcases h5 with ⟨h5_1, h5_2⟩
    rcases h6 with ⟨h6_1, h6_2⟩
    rcases h7 with ⟨h7_1, h7_2⟩
    rcases h8 with ⟨h8_1, h8_2⟩
    rcases h9 with ⟨h9_1, h9_2⟩
    rcases h10 with ⟨h10_1, h10_2⟩
    rcases h11 with ⟨h11_1, h11_2⟩
    rcases h12 with ⟨h12_1, h12_2⟩
    rcases h13 with ⟨h13_1, h13_2⟩
    rcases h14 with ⟨h14_1, h14_2⟩
    rcases h15 with ⟨h15_1, h15_2⟩
    rcases h16 with ⟨h16_1, h16_2⟩
    rcases h17 with ⟨h17_1, h17_2⟩
    unfold map_f_to_bv at h1
    simp at h1
    rcases h1 with ⟨h1_1, h1_2⟩
    -- apply val and unfold subtables
    rw [ZMod.eq_if_val]
    unfold AND_16
    unfold evalSubtable
    simp
    unfold subtableFromMLE
    simp
    unfold Vector.append
    simp
    --- zmod to nat
    valify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    simp
    rw [Nat.mod_eq_of_lt]
    rw [BitVec.ofNat_eq_iff]
    -- apply bv and nat to zmod
    bvify
    -- necessary because of Lean version this can do away
    set a := foutput.val
    set b10:= ZMod.val fv1[0]
    set b11 := ZMod.val fv1[1]
    set b12 := ZMod.val fv1[2]
    set b13 := ZMod.val fv1[3]
    set b14 := ZMod.val fv1[4]
    set b15 := ZMod.val fv1[5]
    set b16 := ZMod.val fv1[6]
    set b17 := ZMod.val fv1[7]
    set b20:= ZMod.val fv2[0]
    set b21 := ZMod.val fv2[1]
    set b22 := ZMod.val fv2[2]
    set b23 := ZMod.val fv2[3]
    set b24 := ZMod.val fv2[4]
    set b25 := ZMod.val fv2[5]
    set b26 := ZMod.val fv2[6]
    set b27 := ZMod.val fv2[7]
    bv_normalize
    bv_decide
    exact h1_1
    --norm_num
    --- range analysis tactic
    try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1, h16_2]

    -- it is dumb that we have to do this twice maybe we can have some sort of lemma that combines the two different rewrites that assume?




-- in lean 0 == false


lemma or_mle_one_chunk [ZKField f] (bv1 bv2 : BitVec 8) (fv1 fv2 : Vector f 8) :
  some bvoutput = map_f_to_bv foutput ->
   some (bool_to_bv bv1[7])  = map_f_to_bv fv1[0]  ->
   some (bool_to_bv bv1[6]) = map_f_to_bv fv1[1]  ->
   some (bool_to_bv bv1[5]) = map_f_to_bv fv1[2]  ->
   some (bool_to_bv bv1[4]) = map_f_to_bv fv1[3]  ->
   some (bool_to_bv bv1[3]) = map_f_to_bv fv1[4]  ->
  some (bool_to_bv bv1[2]) = map_f_to_bv fv1[5]  ->
   some (bool_to_bv bv1[1]) = map_f_to_bv fv1[6]  ->
   some (bool_to_bv bv1[0]) = map_f_to_bv fv1[7]  ->
  some (bool_to_bv bv2[7]) = map_f_to_bv fv2[0]  ->
  some (bool_to_bv bv2[6]) = map_f_to_bv fv2[1]  ->
  some (bool_to_bv bv2[5]) = map_f_to_bv fv2[2]  ->
  some (bool_to_bv bv2[4]) = map_f_to_bv fv2[3]  ->
  some (bool_to_bv bv2[3]) = map_f_to_bv fv2[4]  ->
  some (bool_to_bv bv2[2]) = map_f_to_bv fv2[5]  ->
  some (bool_to_bv bv2[1]) = map_f_to_bv fv2[6]  ->
  some (bool_to_bv bv2[0]) = map_f_to_bv fv2[7]  ->
  (bvoutput = (BitVec.or bv1  bv2 ))
  =
  (foutput = evalSubtable OR_16 (Vector.append fv1 fv2))
 := by
    intros h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rw [extract_bv_rel] at h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rcases h2 with ⟨h2_1, h2_2⟩
    rcases h3 with ⟨h3_1, h3_2⟩
    rcases h4 with ⟨h4_1, h4_2⟩
    rcases h5 with ⟨h5_1, h5_2⟩
    rcases h6 with ⟨h6_1, h6_2⟩
    rcases h7 with ⟨h7_1, h7_2⟩
    rcases h8 with ⟨h8_1, h8_2⟩
    rcases h9 with ⟨h9_1, h9_2⟩
    rcases h10 with ⟨h10_1, h10_2⟩
    rcases h11 with ⟨h11_1, h11_2⟩
    rcases h12 with ⟨h12_1, h12_2⟩
    rcases h13 with ⟨h13_1, h13_2⟩
    rcases h14 with ⟨h14_1, h14_2⟩
    rcases h15 with ⟨h15_1, h15_2⟩
    rcases h16 with ⟨h16_1, h16_2⟩
    rcases h17 with ⟨h17_1, h17_2⟩
    unfold map_f_to_bv at h1
    simp at h1
    rcases h1 with ⟨h1_1, h1_2⟩
    -- apply val and unfold subtables
    rw [ZMod.eq_if_val]
    unfold OR_16
    unfold evalSubtable
    simp
    unfold subtableFromMLE
    simp
    unfold Vector.append
    simp
    --- zmod to nat
    valify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    simp
    rw [Nat.mod_eq_of_lt]
    rw [BitVec.ofNat_eq_iff]
    bvify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    set a := foutput.val
    set b10:= ZMod.val fv1[0]
    set b11 := ZMod.val fv1[1]
    set b12 := ZMod.val fv1[2]
    set b13 := ZMod.val fv1[3]
    set b14 := ZMod.val fv1[4]
    set b15 := ZMod.val fv1[5]
    set b16 := ZMod.val fv1[6]
    set b17 := ZMod.val fv1[7]
    set b20:= ZMod.val fv2[0]
    set b21 := ZMod.val fv2[1]
    set b22 := ZMod.val fv2[2]
    set b23 := ZMod.val fv2[3]
    set b24 := ZMod.val fv2[4]
    set b25 := ZMod.val fv2[5]
    set b26 := ZMod.val fv2[6]
    set b27 := ZMod.val fv2[7]
    bv_normalize
    bv_decide
    exact h1_1
    try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    --try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]



    --- zmod to nat





lemma ltu_mle_one_chunk [ZKField f] (bv1 bv2 : BitVec 8) (fv1 fv2 : Vector f 8) :
  some bvoutput = map_f_to_bv foutput ->
   some (bool_to_bv bv1[7])  = map_f_to_bv fv1[0]  ->
   some (bool_to_bv bv1[6]) = map_f_to_bv fv1[1]  ->
   some (bool_to_bv bv1[5]) = map_f_to_bv fv1[2]  ->
   some (bool_to_bv bv1[4]) = map_f_to_bv fv1[3]  ->
   some (bool_to_bv bv1[3]) = map_f_to_bv fv1[4]  ->
  some (bool_to_bv bv1[2]) = map_f_to_bv fv1[5]  ->
   some (bool_to_bv bv1[1]) = map_f_to_bv fv1[6]  ->
   some (bool_to_bv bv1[0]) = map_f_to_bv fv1[7]  ->
  some (bool_to_bv bv2[7]) = map_f_to_bv fv2[0]  ->
  some (bool_to_bv bv2[6]) = map_f_to_bv fv2[1]  ->
  some (bool_to_bv bv2[5]) = map_f_to_bv fv2[2]  ->
  some (bool_to_bv bv2[4]) = map_f_to_bv fv2[3]  ->
  some (bool_to_bv bv2[3]) = map_f_to_bv fv2[4]  ->
  some (bool_to_bv bv2[2]) = map_f_to_bv fv2[5]  ->
  some (bool_to_bv bv2[1]) = map_f_to_bv fv2[6]  ->
  some (bool_to_bv bv2[0]) = map_f_to_bv fv2[7]  ->
  (bvoutput = bool_to_bv (bv1 < bv2 ))
  =
  (foutput = evalSubtable LTU_16  (Vector.append fv1 fv2))
 := by
    intros h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rw [extract_bv_rel] at h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rcases h2 with ⟨h2_1, h2_2⟩
    rcases h3 with ⟨h3_1, h3_2⟩
    rcases h4 with ⟨h4_1, h4_2⟩
    rcases h5 with ⟨h5_1, h5_2⟩
    rcases h6 with ⟨h6_1, h6_2⟩
    rcases h7 with ⟨h7_1, h7_2⟩
    rcases h8 with ⟨h8_1, h8_2⟩
    rcases h9 with ⟨h9_1, h9_2⟩
    rcases h10 with ⟨h10_1, h10_2⟩
    rcases h11 with ⟨h11_1, h11_2⟩
    rcases h12 with ⟨h12_1, h12_2⟩
    rcases h13 with ⟨h13_1, h13_2⟩
    rcases h14 with ⟨h14_1, h14_2⟩
    rcases h15 with ⟨h15_1, h15_2⟩
    rcases h16 with ⟨h16_1, h16_2⟩
    rcases h17 with ⟨h17_1, h17_2⟩
    unfold map_f_to_bv at h1
    simp at h1
    rcases h1 with ⟨h1_1, h1_2⟩
    -- apply val and unfold subtables
    rw [ZMod.eq_if_val]
    unfold LTU_16
    unfold evalSubtable
    simp
    unfold subtableFromMLE
    simp
    unfold Vector.append
    simp
   -- simp  [ult_val h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, or_val, ZMod.val_sub, ZMod.val_add, ZMod.val_mul, ZMod.val_one, ZMod.val_ofNat, push_cast]
    --valify [h2_1, h11_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    simp [ZMod.val_add]
    simp [ZMod.val_mul]
    simp [Nat.add_mod, Nat.mul_mod, Nat.mod_mul_left_mod, Nat.mod_mul_right_mod]
    simp
    --rw [Nat.mod_eq_of_lt]
   -- simp [ult_val  h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1]
    simp [ult_val h2_1 h10_1]

    simp [ult_val h3_1 h11_1]

    simp [ult_val h4_1 h12_1]
    simp [ult_val h5_1 h13_1]
    simp [ult_val h6_1 h14_1]
    simp [ult_val h7_1 h15_1]
    simp [ult_val h8_1 h16_1]
    --simp [ZMod.val_add]
   -- simp [ZMod.val_mul]
    --simp [ZMod.val_mul]
    simp [*]
    rw [ZMod.val_sub h2_1]
    rw [ZMod.val_sub h3_1]
    rw [ZMod.val_sub h4_1]
    rw [ZMod.val_sub h5_1]
    rw [ZMod.val_sub h6_1]
    rw [ZMod.val_sub h7_1]
    rw [ZMod.val_sub h8_1]
    rw [ZMod.val_sub h9_1]
    simp [ZMod.val_one]
    --simp [<- Nat.mul_mod]
    --simp
    rw [Nat.mod_eq_of_lt]


    rw [BitVec.ofNat_eq_iff]
    unfold bool_to_bv
    -- apply bv and nat to zmod
    bvify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    -- necessary because of Lean version this can do away
    set a := foutput.val
    set b10:= ZMod.val fv1[0]
    set b11 := ZMod.val fv1[1]
    set b12 := ZMod.val fv1[2]
    set b13 := ZMod.val fv1[3]
    set b14 := ZMod.val fv1[4]
    set b15 := ZMod.val fv1[5]
    set b16 := ZMod.val fv1[6]
    set b17 := ZMod.val fv1[7]
    set b20:= ZMod.val fv2[0]
    set b21 := ZMod.val fv2[1]
    set b22 := ZMod.val fv2[2]
    set b23 := ZMod.val fv2[3]
    set b24 := ZMod.val fv2[4]
    set b25 := ZMod.val fv2[5]
    set b26 := ZMod.val fv2[6]
    set b27 := ZMod.val fv2[7]
    bv_normalize
    bv_decide
    --bv_decide
    exact h1_1

    --- range analysis tactic
    try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    --try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]

lemma lt_abs_mle_one_chunk [ZKField f] (bv1 bv2 : BitVec 8) (fv1 fv2 : Vector f 8) :
  some bvoutput = map_f_to_bv foutput ->
   some (bool_to_bv bv1[7])  = map_f_to_bv fv1[0]  ->
   some (bool_to_bv bv1[6]) = map_f_to_bv fv1[1]  ->
   some (bool_to_bv bv1[5]) = map_f_to_bv fv1[2]  ->
   some (bool_to_bv bv1[4]) = map_f_to_bv fv1[3]  ->
   some (bool_to_bv bv1[3]) = map_f_to_bv fv1[4]  ->
  some (bool_to_bv bv1[2]) = map_f_to_bv fv1[5]  ->
   some (bool_to_bv bv1[1]) = map_f_to_bv fv1[6]  ->
   some (bool_to_bv bv1[0]) = map_f_to_bv fv1[7]  ->
  some (bool_to_bv bv2[7]) = map_f_to_bv fv2[0]  ->
  some (bool_to_bv bv2[6]) = map_f_to_bv fv2[1]  ->
  some (bool_to_bv bv2[5]) = map_f_to_bv fv2[2]  ->
  some (bool_to_bv bv2[4]) = map_f_to_bv fv2[3]  ->
  some (bool_to_bv bv2[3]) = map_f_to_bv fv2[4]  ->
  some (bool_to_bv bv2[2]) = map_f_to_bv fv2[5]  ->
  some (bool_to_bv bv2[1]) = map_f_to_bv fv2[6]  ->
  some (bool_to_bv bv2[0]) = map_f_to_bv fv2[7]  ->
  (bvoutput = bool_to_bv (BitVec.and bv1 127 < BitVec.and bv2 127 ))
  =
  (foutput = evalSubtable LT_ABS_16  (Vector.append fv1 fv2))
 := by
    intros h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rw [extract_bv_rel] at h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rcases h2 with ⟨h2_1, h2_2⟩
    rcases h3 with ⟨h3_1, h3_2⟩
    rcases h4 with ⟨h4_1, h4_2⟩
    rcases h5 with ⟨h5_1, h5_2⟩
    rcases h6 with ⟨h6_1, h6_2⟩
    rcases h7 with ⟨h7_1, h7_2⟩
    rcases h8 with ⟨h8_1, h8_2⟩
    rcases h9 with ⟨h9_1, h9_2⟩
    rcases h10 with ⟨h10_1, h10_2⟩
    rcases h11 with ⟨h11_1, h11_2⟩
    rcases h12 with ⟨h12_1, h12_2⟩
    rcases h13 with ⟨h13_1, h13_2⟩
    rcases h14 with ⟨h14_1, h14_2⟩
    rcases h15 with ⟨h15_1, h15_2⟩
    rcases h16 with ⟨h16_1, h16_2⟩
    rcases h17 with ⟨h17_1, h17_2⟩
    unfold map_f_to_bv at h1
    simp at h1
    rcases h1 with ⟨h1_1, h1_2⟩
    -- apply val and unfold subtables
    rw [ZMod.eq_if_val]
    unfold LT_ABS_16
    unfold evalSubtable
    simp
    unfold subtableFromMLE
    simp
    unfold Vector.append
    simp
   -- simp  [ult_val h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, or_val, ZMod.val_sub, ZMod.val_add, ZMod.val_mul, ZMod.val_one, ZMod.val_ofNat, push_cast]
    --valify [h2_1, h11_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    simp [ZMod.val_add]
    simp [ZMod.val_mul]
    simp [Nat.add_mod, Nat.mul_mod, Nat.mod_mul_left_mod, Nat.mod_mul_right_mod]
    simp
    --rw [Nat.mod_eq_of_lt]
   -- simp [ult_val  h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1]


    simp [ult_val h3_1 h11_1]

    simp [ult_val h4_1 h12_1]
    simp [ult_val h5_1 h13_1]
    simp [ult_val h6_1 h14_1]
    simp [ult_val h7_1 h15_1]
    simp [ult_val h8_1 h16_1]
    --simp [ZMod.val_add]
   -- simp [ZMod.val_mul]
    --simp [ZMod.val_mul]
    simp [*]
    rw [ZMod.val_sub h3_1]
    rw [ZMod.val_sub h4_1]
    rw [ZMod.val_sub h5_1]
    rw [ZMod.val_sub h6_1]
    rw [ZMod.val_sub h7_1]
    rw [ZMod.val_sub h8_1]
    rw [ZMod.val_sub h9_1]
    simp [ZMod.val_one]
    --simp [<- Nat.mul_mod]
    --simp
    rw [Nat.mod_eq_of_lt]


    rw [BitVec.ofNat_eq_iff]
    unfold bool_to_bv
    -- apply bv and nat to zmod
    bvify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    -- necessary because of Lean version this can do away
    set a := foutput.val
    set b10:= ZMod.val fv1[0]
    set b11 := ZMod.val fv1[1]
    set b12 := ZMod.val fv1[2]
    set b13 := ZMod.val fv1[3]
    set b14 := ZMod.val fv1[4]
    set b15 := ZMod.val fv1[5]
    set b16 := ZMod.val fv1[6]
    set b17 := ZMod.val fv1[7]
    set b20:= ZMod.val fv2[0]
    set b21 := ZMod.val fv2[1]
    set b22 := ZMod.val fv2[2]
    set b23 := ZMod.val fv2[3]
    set b24 := ZMod.val fv2[4]
    set b25 := ZMod.val fv2[5]
    set b26 := ZMod.val fv2[6]
    set b27 := ZMod.val fv2[7]
    bv_normalize
    bv_decide
    --bv_decide
    exact h1_1

    --- range analysis tactic
    try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    --try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]


def bv2 := 7#8
def bv1 := 249#8

--11111001
-- 0
#eval bool_to_bv (bv2.abs = bv1.abs)
#eval bool_to_bv (bv2[0])
#eval bool_to_bv (bv1[0])

#eval (bool_to_bv bv1[6] * bool_to_bv bv2[6]+ (1#8 - bool_to_bv bv1[6]) * (1#8 - bool_to_bv bv2[6])) *
                (bool_to_bv bv1[5]  * bool_to_bv bv2[5]  + (1#8 - bool_to_bv bv1[5]) * (1#8 - bool_to_bv bv2[5])) *
              (bool_to_bv bv1[4] * bool_to_bv bv2[4] + (1#8 - bool_to_bv bv1[4]) * (1#8 - bool_to_bv bv2[4])) *
            (bool_to_bv bv1[3] * bool_to_bv bv2[3] + (1#8 - bool_to_bv bv1[3]) * (1#8 - bool_to_bv bv2[3])) *
          (bool_to_bv bv1[2] * bool_to_bv bv2[2]  + (1#8 -bool_to_bv bv1[2]) * (1#8 - bool_to_bv bv2[2])) *
        (bool_to_bv bv1[1] * bool_to_bv bv2[1] + (1#8 -bool_to_bv bv1[1]) * (1#8 - bool_to_bv bv2[1])) *
      (bool_to_bv bv1[0] * bool_to_bv bv2[0]  + (1#8 - bool_to_bv bv1[0]) * (1#8 -bool_to_bv bv2[0]))



lemma right_msb_mle_one_chunk [ZKField f] (bv1 bv2 : BitVec 8) (fv1 fv2 : Vector f 8) :
  some bvoutput = map_f_to_bv foutput ->
   some (bool_to_bv bv1[7])  = map_f_to_bv fv1[0]  ->
   some (bool_to_bv bv1[6]) = map_f_to_bv fv1[1]  ->
   some (bool_to_bv bv1[5]) = map_f_to_bv fv1[2]  ->
   some (bool_to_bv bv1[4]) = map_f_to_bv fv1[3]  ->
   some (bool_to_bv bv1[3]) = map_f_to_bv fv1[4]  ->
  some (bool_to_bv bv1[2]) = map_f_to_bv fv1[5]  ->
   some (bool_to_bv bv1[1]) = map_f_to_bv fv1[6]  ->
   some (bool_to_bv bv1[0]) = map_f_to_bv fv1[7]  ->
  some (bool_to_bv bv2[7]) = map_f_to_bv fv2[0]  ->
  some (bool_to_bv bv2[6]) = map_f_to_bv fv2[1]  ->
  some (bool_to_bv bv2[5]) = map_f_to_bv fv2[2]  ->
  some (bool_to_bv bv2[4]) = map_f_to_bv fv2[3]  ->
  some (bool_to_bv bv2[3]) = map_f_to_bv fv2[4]  ->
  some (bool_to_bv bv2[2]) = map_f_to_bv fv2[5]  ->
  some (bool_to_bv bv2[1]) = map_f_to_bv fv2[6]  ->
  some (bool_to_bv bv2[0]) = map_f_to_bv fv2[7]  ->
  (bvoutput = bool_to_bv (BitVec.msb bv2))
  =
  (foutput = evalSubtable RIGHT_MSB_16 (Vector.append fv1 fv2))
 := by
    intros h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rw [extract_bv_rel] at h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rcases h2 with ⟨h2_1, h2_2⟩
    rcases h3 with ⟨h3_1, h3_2⟩
    rcases h4 with ⟨h4_1, h4_2⟩
    rcases h5 with ⟨h5_1, h5_2⟩
    rcases h6 with ⟨h6_1, h6_2⟩
    rcases h7 with ⟨h7_1, h7_2⟩
    rcases h8 with ⟨h8_1, h8_2⟩
    rcases h9 with ⟨h9_1, h9_2⟩
    rcases h10 with ⟨h10_1, h10_2⟩
    rcases h11 with ⟨h11_1, h11_2⟩
    rcases h12 with ⟨h12_1, h12_2⟩
    rcases h13 with ⟨h13_1, h13_2⟩
    rcases h14 with ⟨h14_1, h14_2⟩
    rcases h15 with ⟨h15_1, h15_2⟩
    rcases h16 with ⟨h16_1, h16_2⟩
    rcases h17 with ⟨h17_1, h17_2⟩
    unfold map_f_to_bv at h1
    simp at h1
    rcases h1 with ⟨h1_1, h1_2⟩
    -- apply val and unfold subtables
    rw [ZMod.eq_if_val]
    unfold RIGHT_MSB_16
    unfold evalSubtable
    unfold bool_to_bv
    simp
    unfold subtableFromMLE
    simp
    unfold Vector.append
    simp
    --- zmod to nat
    -- valify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1, h16_1]
    -- simp
    -- rw [Nat.mod_eq_of_lt]
    rw [BitVec.ofNat_eq_iff]
    -- apply bv and nat to zmod
    --bvify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1, h16_1]
    -- necessary because of Lean version this can do away
    set a := foutput.val
    set b10:= ZMod.val fv1[0]
    set b11 := ZMod.val fv1[1]
    set b12 := ZMod.val fv1[2]
    set b13 := ZMod.val fv1[3]
    set b14 := ZMod.val fv1[4]
    set b15 := ZMod.val fv1[5]
    set b16 := ZMod.val fv1[6]
    set b17 := ZMod.val fv1[7]
    set b20:= ZMod.val fv2[0]
    set b21 := ZMod.val fv2[1]
    set b22 := ZMod.val fv2[2]
    set b23 := ZMod.val fv2[3]
    set b24 := ZMod.val fv2[4]
    set b25 := ZMod.val fv2[5]
    set b26 := ZMod.val fv2[6]
    set b27 := ZMod.val fv2[7]
    bv_normalize
    bv_decide
    exact h1_1

    --- range analysis tactic
    try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]





lemma eq_mle_one_chunk_liza[ZKField f] (bv1 bv2 : BitVec 8) (fv1 fv2 : Vector f 8) :
  some bvoutput = map_f_to_bv foutput ->
   some (bool_to_bv bv1[7])  = map_f_to_bv fv1[0]  ->
   some (bool_to_bv bv1[6]) = map_f_to_bv fv1[1]  ->
   some (bool_to_bv bv1[5]) = map_f_to_bv fv1[2]  ->
   some (bool_to_bv bv1[4]) = map_f_to_bv fv1[3]  ->
   some (bool_to_bv bv1[3]) = map_f_to_bv fv1[4]  ->
  some (bool_to_bv bv1[2]) = map_f_to_bv fv1[5]  ->
   some (bool_to_bv bv1[1]) = map_f_to_bv fv1[6]  ->
   some (bool_to_bv bv1[0]) = map_f_to_bv fv1[7]  ->
  some (bool_to_bv bv2[7]) = map_f_to_bv fv2[0]  ->
  some (bool_to_bv bv2[6]) = map_f_to_bv fv2[1]  ->
  some (bool_to_bv bv2[5]) = map_f_to_bv fv2[2]  ->
  some (bool_to_bv bv2[4]) = map_f_to_bv fv2[3]  ->
  some (bool_to_bv bv2[3]) = map_f_to_bv fv2[4]  ->
  some (bool_to_bv bv2[2]) = map_f_to_bv fv2[5]  ->
  some (bool_to_bv bv2[1]) = map_f_to_bv fv2[6]  ->
  some (bool_to_bv bv2[0]) = map_f_to_bv fv2[7]  ->
  (bvoutput = bool_to_bv (bv1 == bv2))
  =
  (foutput = evalSubtable EQ_16 (Vector.append fv1 fv2))
 := by
    intros h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rw [extract_bv_rel] at h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rcases h2 with ⟨h2_1, h2_2⟩
    rcases h3 with ⟨h3_1, h3_2⟩
    rcases h4 with ⟨h4_1, h4_2⟩
    rcases h5 with ⟨h5_1, h5_2⟩
    rcases h6 with ⟨h6_1, h6_2⟩
    rcases h7 with ⟨h7_1, h7_2⟩
    rcases h8 with ⟨h8_1, h8_2⟩
    rcases h9 with ⟨h9_1, h9_2⟩
    rcases h10 with ⟨h10_1, h10_2⟩
    rcases h11 with ⟨h11_1, h11_2⟩
    rcases h12 with ⟨h12_1, h12_2⟩
    rcases h13 with ⟨h13_1, h13_2⟩
    rcases h14 with ⟨h14_1, h14_2⟩
    rcases h15 with ⟨h15_1, h15_2⟩
    rcases h16 with ⟨h16_1, h16_2⟩
    rcases h17 with ⟨h17_1, h17_2⟩
    unfold map_f_to_bv at h1
    simp at h1
    rcases h1 with ⟨h1_1, h1_2⟩
    -- apply val and unfold subtables
    rw [ZMod.eq_if_val]
    unfold EQ_16
    unfold evalSubtable
    unfold bool_to_bv
    simp
    unfold subtableFromMLE
    simp
    unfold Vector.append
    simp
    --- zmod to nat
    valify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1, h16_1]
    simp
    rw [Nat.mod_eq_of_lt]
    rw [BitVec.ofNat_eq_iff]
    -- apply bv and nat to zmod
    bvify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1, h16_1]
    -- necessary because of Lean version this can do away
    set a := foutput.val
    set b10:= ZMod.val fv1[0]
    set b11 := ZMod.val fv1[1]
    set b12 := ZMod.val fv1[2]
    set b13 := ZMod.val fv1[3]
    set b14 := ZMod.val fv1[4]
    set b15 := ZMod.val fv1[5]
    set b16 := ZMod.val fv1[6]
    set b17 := ZMod.val fv1[7]
    set b20:= ZMod.val fv2[0]
    set b21 := ZMod.val fv2[1]
    set b22 := ZMod.val fv2[2]
    set b23 := ZMod.val fv2[3]
    set b24 := ZMod.val fv2[4]
    set b25 := ZMod.val fv2[5]
    set b26 := ZMod.val fv2[6]
    set b27 := ZMod.val fv2[7]
    bv_normalize
    bv_decide
    --bv_decide
    exact h1_1

    --- range analysis tactic
    try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    --try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]

    --- range analysis tactic
   -- try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
   -- try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1]
    --norm_num



lemma DIV_BY_ZERO_mle_one_chunk[ZKField f] (bv1 bv2 : BitVec 8) (fv1 fv2 : Vector f 8) :
  some bvoutput = map_f_to_bv foutput ->
   some (bool_to_bv bv1[7])  = map_f_to_bv fv1[0]  ->
   some (bool_to_bv bv1[6]) = map_f_to_bv fv1[1]  ->
   some (bool_to_bv bv1[5]) = map_f_to_bv fv1[2]  ->
   some (bool_to_bv bv1[4]) = map_f_to_bv fv1[3]  ->
   some (bool_to_bv bv1[3]) = map_f_to_bv fv1[4]  ->
  some (bool_to_bv bv1[2]) = map_f_to_bv fv1[5]  ->
   some (bool_to_bv bv1[1]) = map_f_to_bv fv1[6]  ->
   some (bool_to_bv bv1[0]) = map_f_to_bv fv1[7]  ->
  some (bool_to_bv bv2[7]) = map_f_to_bv fv2[0]  ->
  some (bool_to_bv bv2[6]) = map_f_to_bv fv2[1]  ->
  some (bool_to_bv bv2[5]) = map_f_to_bv fv2[2]  ->
  some (bool_to_bv bv2[4]) = map_f_to_bv fv2[3]  ->
  some (bool_to_bv bv2[3]) = map_f_to_bv fv2[4]  ->
  some (bool_to_bv bv2[2]) = map_f_to_bv fv2[5]  ->
  some (bool_to_bv bv2[1]) = map_f_to_bv fv2[6]  ->
  some (bool_to_bv bv2[0]) = map_f_to_bv fv2[7]  ->
  (bvoutput = bool_to_bv (bv1 = 0#8 && bv2 = 255#8) )
  =
  (foutput = evalSubtable DIV_BY_ZERO_16 (Vector.append fv1 fv2))
 := by
    -- set up hypothesis
    intros h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rw [extract_bv_rel] at h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17
    rcases h2 with ⟨h2_1, h2_2⟩
    rcases h3 with ⟨h3_1, h3_2⟩
    rcases h4 with ⟨h4_1, h4_2⟩
    rcases h5 with ⟨h5_1, h5_2⟩
    rcases h6 with ⟨h6_1, h6_2⟩
    rcases h7 with ⟨h7_1, h7_2⟩
    rcases h8 with ⟨h8_1, h8_2⟩
    rcases h9 with ⟨h9_1, h9_2⟩
    rcases h10 with ⟨h10_1, h10_2⟩
    rcases h11 with ⟨h11_1, h11_2⟩
    rcases h12 with ⟨h12_1, h12_2⟩
    rcases h13 with ⟨h13_1, h13_2⟩
    rcases h14 with ⟨h14_1, h14_2⟩
    rcases h15 with ⟨h15_1, h15_2⟩
    rcases h16 with ⟨h16_1, h16_2⟩
    rcases h17 with ⟨h17_1, h17_2⟩
    unfold map_f_to_bv at h1
    simp at h1
    rcases h1 with ⟨h1_1, h1_2⟩
    -- apply val and unfold subtables
    rw [ZMod.eq_if_val]
    unfold DIV_BY_ZERO_16
    unfold evalSubtable
    simp
    unfold subtableFromMLE
    simp
    unfold Vector.append
    simp
    valify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1, h16_1]
    simp
    rw [Nat.mod_eq_of_lt]
    rw [BitVec.ofNat_eq_iff]
    -- apply bv and nat to zmod
    bvify [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1, h16_1]
    unfold bool_to_bv
    -- apply bv and nat to zmod
    -- necessary because of Lean version this can do away
    set a := foutput.val
    set b10:= ZMod.val fv1[0]
    set b11 := ZMod.val fv1[1]
    set b12 := ZMod.val fv1[2]
    set b13 := ZMod.val fv1[3]
    set b14 := ZMod.val fv1[4]
    set b15 := ZMod.val fv1[5]
    set b16 := ZMod.val fv1[6]
    set b17 := ZMod.val fv1[7]
    set b20:= ZMod.val fv2[0]
    set b21 := ZMod.val fv2[1]
    set b22 := ZMod.val fv2[2]
    set b23 := ZMod.val fv2[3]
    set b24 := ZMod.val fv2[4]
    set b25 := ZMod.val fv2[5]
    set b26 := ZMod.val fv2[6]
    set b27 := ZMod.val fv2[7]
    --grind
    --bv_decide
    bv_decide
    exact h1_1
    --norm_num
    --- range analysis tactic
    try_apply_lemma_hyps [h2_1, h3_1, h4_1, h5_1, h6_1, h7_1, h8_1, h9_1, h10_1, h11_1, h12_1, h13_1, h14_1, h15_1, h16_1, h17_1, h16_2]
