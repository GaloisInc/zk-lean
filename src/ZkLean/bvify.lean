/-
Copyright (c) 2022 Moritz Doll. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Moritz Doll, Mario Carneiro, Robert Y. Lewis
-/
import Mathlib.Tactic.Basic
import Mathlib.Tactic.Attr.Register
import Mathlib.Data.Int.Cast.Basic
import Mathlib.Order.Basic
import Lean.Meta.Tactic.Simp.SimpTheorems
import Lean.Meta.Tactic.Simp.RegisterCommand
import Lean.LabelAttribute
import ZkLean.AST
import Mathlib.Data.ZMod.Basic
import Mathlib.Tactic.Ring
import Mathlib.Algebra.Field.Defs
import Mathlib.Algebra.Field.ZMod
import Mathlib.Control.Fold
import Mathlib.Data.Nat.Prime.Defs
import Mathlib.Data.ZMod.Defs
import Mathlib.Algebra.Order.Kleene
import MPL
import MPL.Triple
import ZkLean
import Std.Data.HashMap.Basic
import Lean.Meta.Basic
import Lean.Elab.Term
import Mathlib.Tactic.Ring
import Std.Tactic.BVDecide
import Mathlib.Tactic.Linarith
import Mathlib.Tactic.Bound
import Mathlib.Tactic.Positivity



/-!
# `valify` tactic

Hello :)
```

```
-/

namespace Mathlib.Tactic.BVify



open Lean
open Lean.Meta
open Lean.Parser.Tactic
open Lean.Elab.Tactic


 lemma BitVec.ofNat_mul {w a b : ℕ} :
  BitVec.ofNat w (a * b) =
    (BitVec.ofNat w a) * (BitVec.ofNat w b) := by
  -- BitVec multiplication is just modulo 2^w
  sorry



lemma BitVec.ofNat_sub{w a b : ℕ} :
  BitVec.ofNat w (a - b) =
    (BitVec.ofNat w a) - (BitVec.ofNat w b) := by
  -- BitVec multiplication is just modulo 2^w
  sorry

/--
Hello.
-/
syntax (name := bvify) "bvify" (simpArgs)? (location)? : tactic





macro_rules
| `(tactic| bvify $[[$simpArgs,*]]? $[at $location]?) =>
  let args := simpArgs.map (·.getElems) |>.getD #[]
  `(tactic|
    simp -decide only [BitVec.ofNat_add, BitVec.ofNat_mul, BitVec.ofNat_sub, push_cast, norm_num, $args,*] $[at $location]? )



-- name: ZModify

-- /-- The `Simp.Context` generated by `zify`. -/
def mkZifyContext (simpArgs : Option (Syntax.TSepArray `Lean.Parser.Tactic.simpStar ",")) :
    TacticM MkSimpContextResult := do
  let args := simpArgs.map (·.getElems) |>.getD #[]
  mkSimpContext
    (← `(tactic| simp -decide only  [BitVec.ofNat_add, BitVec.ofNat_mul, BitVec.ofNat_sub, push_cast, norm_num, $args,*] )) false

/-- A variant of `applySimpResultToProp` that cannot close the goal, but does not need a meta
variable and returns a tuple of a proof and the corresponding simplified proposition. -/
def applySimpResultToProp' (proof : Expr) (prop : Expr) (r : Simp.Result) : MetaM (Expr × Expr) :=
  do
  match r.proof? with
  | some eqProof => return (← mkExpectedTypeHint (← mkEqMP eqProof proof) r.expr, r.expr)
  | none =>
    if r.expr != prop then
      return (← mkExpectedTypeHint proof r.expr, r.expr)
    else
      return (proof, r.expr)

/-- Translate a proof and the proposition into a zified form. -/
def zifyProof (simpArgs : Option (Syntax.TSepArray `Lean.Parser.Tactic.simpStar ","))
    (proof : Expr) (prop : Expr) : TacticM (Expr × Expr) := do
  let ctx_result ← mkZifyContext simpArgs
  let (r, _) ← simp prop ctx_result.ctx
  applySimpResultToProp' proof prop r



end BVify

end Mathlib.Tactic
