import Lean
import Mathlib.Data.Nat.Basic
import Mathlib.Tactic
import Mathlib.Tactic.Eval

open Lean Meta Elab Tactic


lemma Nat.lt_sub (a :‚Ñï) (h: a <= 1) :
  (1 - a) <= 1 := by sorry

def ignoredConsts : NameSet :=
  #[``Nat, ``instLTNat, ``instLENat, ``HAdd.hAdd, ``HMul.hMul, ``HSub.hSub].foldl
    (init := {}) fun s n => s.insert n

partial def collectVarsAppAndConst (e : Expr) (acc : NameSet := {}) : MetaM NameSet := do
  --logInfo m!"üîç Visiting: {‚Üê ppExpr e}"
  let mut acc := acc

  let e ‚Üê instantiateMVars e
  if e.isFVar then
    let fvarId := e.fvarId!
    let lctx ‚Üê getLCtx
    if let some decl := lctx.find? fvarId then
      logInfo m!"‚úÖ Found local var: {decl.userName}"
      acc := acc.insert decl.userName
    else
      logInfo m!"‚ùå Skipping local var"
      return acc
  if e.isApp then
    let args := e.getAppArgs
    for arg in args do
      acc ‚Üê collectVarsAppAndConst arg acc
    return acc
  else
    return acc

-- Main function: check if the 3rd argument has exactly two distinct names
def thirdExprHasTwoVarsAppAndConst (args : Expr) : MetaM Bool := do
  logInfo m!"Args: {args}"
  let vars ‚Üê collectVarsAppAndConst args
  return vars.size == 2


private def tryApplyLemma (g : MVarId) (goalType : Expr) (stx : TSyntax `term) (name : String) : TacticM Bool := do
  try
    let e ‚Üê elabTerm stx goalType
    let subgoals ‚Üê g.apply e
    logInfo m!"‚úÖ Applied {name} to goal {‚Üê PrettyPrinter.ppExpr goalType}"
    setGoals subgoals
    return true
  catch err =>
    logInfo m!"‚ùå Failed to apply {name} to goal {‚Üê PrettyPrinter.ppExpr goalType}: {‚Üê err.toMessageData.toString}"
    return false

partial def findConstHead? (e : Expr) : Option Name :=
  match e with
  | Expr.const name _ => some name
  | Expr.app f _ => findConstHead? f
  | Expr.mdata _ b => findConstHead? b
  | Expr.proj _ _ b => findConstHead? b
  | _ => none

syntax (name := tryApplyLemHyps) "try_apply_lemma_hyps" ppSpace "[" ident,* "]" : tactic

@[tactic tryApplyLemHyps]
elab_rules : tactic
| `(tactic| try_apply_lemma_hyps [$hs,*]) => do
  let hyps := (hs.getElems.map (¬∑.getId)).toList
  let mut progress := true
  let lt ‚Üê `(Nat.lt_of_le_of_lt)
  let sub ‚Üê `(Nat.lt_sub)
  let add ‚Üê `(Nat.add_le_add)
  let mul ‚Üê `(Nat.mul_le_mul)
  let rfl ‚Üê `(Nat.le_refl)
  let lemmas : List (TSyntax `term √ó String) := [
    (‚Üê `(Nat.lt_of_le_of_lt), "Nat.lt_of_le_of_lt"),
    (‚Üê `(Nat.lt_sub), "Nat.lt_sub"),
    (‚Üê `(Nat.add_le_add), "Nat.add_le_add"),
    (‚Üê `(Nat.mul_le_mul), "Nat.mul_le_mul"),
  ]
  let mut first_lemma := true
  let mut random := false
  while progress do
    progress := false
    let goals ‚Üê getGoals
    let mut updatedGoals : List MVarId := []
    let mut handled := false
    for g in goals do
      -- goal was solved so we don't need to do it
      if ‚Üê g.isAssigned then
        updatedGoals := updatedGoals ++ [g]
        continue
      -- handled exists so we only do the first goal as opposed to iterating through them all
      if handled then
        updatedGoals := updatedGoals ++ [g]
        continue
       -- Focus on one goal at a time
      setGoals [g]
      let goalType ‚Üê g.getType
      --logInfo m!"üß™ Solving goal {g}"
      let mut applied := false
      for hName in hyps do
          unless applied do
          --logInfo m!"üß™ Trying hypothesis {hName}"
          try
        let subgoals ‚Üê g.withContext do
          let lctx ‚Üê getLCtx
          let some decl := lctx.findFromUserName? hName
            | throwError m!"‚ùå Could not find a hypothesis named `{hName}`"
          let hExpr := mkFVar decl.fvarId
          g.apply hExpr
        -- outside `withContext` block: safe to mutate
        updatedGoals := updatedGoals ++ subgoals
        applied := true
        handled := true
        progress := true
      catch err =>
        random := false
        --logInfo m!"‚ùå Failed to apply {hName}: {‚Üê err.toMessageData.toString}"
      let (fn, args) := goalType.getAppFnArgs
      if !applied && args.size > 3 then
        let g ‚Üê getMainGoal
        let goalType ‚Üê g.getType
        let (fn, args) := goalType.getAppFnArgs
        let unfolded := ‚Üê withTransparency .reducible (whnf args[2]!)
        let fn3 := unfolded.getAppFn
        logInfo m!"SOS: looking at {goalType}"
        let result ‚Üê thirdExprHasTwoVarsAppAndConst goalType
        logInfo m!"result: {result}"
        let mut lemmaMatch := none
        if (first_lemma) then
          first_lemma := false
          lemmaMatch :=
            match fn with
            | name =>
              match name with
              | ``LT.lt => some ("Nat.lt_of_le_of_lt", lt)
              | _ => none
        else
          lemmaMatch :=
            match fn with
            | name =>
              match name with
              | ``LE.le =>
                -- THIS SHOULD BE MATCH LATER
                match fn3 with
                | Expr.const name _ =>
                  match name with
                    --| ``LT.lt => some ("Nat.lt_of_le_of_lt", lt)
                    | ``HSub.hSub => some ("Nat.lt_sub", sub)
                    | ``HAdd.hAdd => some ("Nat.add_le_add", add)
                    | ``HMul.hMul => some ("Nat.mul_le_mul", mul)
                    | ``OfNat.ofNat => some ("@OfNat.ofNat", rfl)
                    | _ => none
                | _ => none
              | _ => none
        match lemmaMatch with
        | some (name, stx) =>
            try
              --logInfo m!"Looking at lemma {name}"
              let e ‚Üê elabTerm stx goalType
              let subgoals ‚Üê g.apply e
              --logInfo m!"‚úÖ Applied lemma {name} to goal {‚Üê PrettyPrinter.ppExpr goalType}"
              updatedGoals := updatedGoals ++ subgoals
              handled := true
              progress := true
              applied := true
            catch err =>
              random := false
              --logInfo m!"‚ùå Failed to apply lemma {name} to goal {‚Üê PrettyPrinter.ppExpr goalType}: {‚Üê err.toMessageData.toString}"
        | none =>
            random := false
            --logInfo m!"‚ùå Failed to find a lemma for {fn} and args {args}"
      if not applied then
        try
          evalTactic (‚Üê `(tactic| norm_num))
          if ‚Üê g.isAssigned then
            let newType ‚Üê g.getType
            let t ‚Üê Meta.inferType (mkMVar g)
    -- you can also choose to restore the goal or stop here
            let remaining ‚Üê getUnsolvedGoals
            if remaining.contains g then
              logInfo m!"‚ûñ norm_num modified goal {g}, but did not fully solve it"
            else
              logInfo m!"‚úÖ Fully solved goal {g} using norm_num"
              updatedGoals := updatedGoals ++ [g]
              applied := true
              handled := true
          else
            logInfo m!"‚ùå did not solve the goal? {g}"
            updatedGoals := updatedGoals ++ [g]
            applied := true
            handled := true
        catch err =>
          logInfo m!"‚ùå norm_num failed on goal {‚Üê PrettyPrinter.ppExpr goalType}: {‚Üê err.toMessageData.toString}"
          updatedGoals := updatedGoals ++ [g]
          handled := true
          applied := true
    setGoals updatedGoals





-- example (x y : ‚Ñï) (h1 : x ‚â§ 1) (h2 : y ‚â§ 1) : (1 - x) * y < 17 := by
--   try_apply_lemma_hyps [h1,h2]




-- example (x y : ‚Ñï) (h1 : x ‚â§ 1) (h2 : y ‚â§ 1) : (1 - x) + (1 - y) * x < 17 := by
--    try_apply_lemma_hyps [h1,h2]




-- example (x y : ‚Ñï) (h1 : x ‚â§ 1) (h2 : y ‚â§ 1) : (1 - x) * (1 - y) * x < 17 := by
--   try_apply_lemma_hyps [h1,h2]


-- example (x y : ‚Ñï):  (h1 : x ‚â§ 1) -> (h2 : y ‚â§ 1) -> 2 * (1 - y) + 4 * (1-x) < 17 := by
--   intros h1
--   intros h2
--   try_apply_lemma_hyps [h1,h2]


-- We need a way of catching when norm_num returns false
--


elab "prove_lt_by_cases" : tactic => do
  -- Step 2: insert `Nat.le_refl 1` `
  evalTactic (‚Üê `(tactic| apply Nat.le_trans _ (by exact Nat.le_refl 1)))
  -- Step 3: case split on x and y
  -- evalTactic (‚Üê `(tactic|
  --   cases x with
  --   | zero =>
  --     cases y with
  --     | zero => norm_num
  --     | succ y' =>
  --       cases y' with
  --       | zero => norm_num
  --       | succ _ => contradiction
  --   | succ x' =>
  --     cases x' with
  --     | zero =>
  --       cases y with
  --       | zero => norm_num
  --       | succ y' =>
  --         cases y' with
  --         | zero => norm_num
  --         | succ _ => contradiction
  --     | succ _ => contradiction
  -- ))

example (x y : ‚Ñï): (h1 : x ‚â§ 1) ‚Üí (h2 : y ‚â§ 1) ‚Üí  (x * (1 - y) + y * (1 - x)) < 17 := by
  intros h1 h2
  apply Nat.lt_of_le_of_lt
  prove_lt_by_cases



example (x y : ‚Ñï) (hx : x ‚â§ 1) (hy : y ‚â§ 1) :
    2 * (x * (1 - y) + y * (1 - x)) < _ := by
  apply Nat.lt_of_lt_of_le _ (by norm_num)
